//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace TimecardApp.TimelogProjectManagementService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="APIBase", Namespace="http://www.timelog.com/api/tlp/v1_2")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.APIBaseExtended))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.CustomField))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ExternalSystemContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Task))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.CustomerHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ProjectHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.TaskType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Allocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.EmployeeHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Project))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.WorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.TaskHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Request))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.WorkUnitFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlatExternal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.WorkUnitFlatExternal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfProjectTaskFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ProjectTaskFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.SecurityToken))]
    public partial class APIBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchContainerOfProject", Namespace="http://www.timelog.com/api/tlp/v1_2")]
    public partial class BatchContainerOfProject : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private TimecardApp.TimelogProjectManagementService.Project ItemField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus StatusField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.Project Item {
            get {
                return this.ItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemField, value) != true)) {
                    this.ItemField = value;
                    this.RaisePropertyChanged("Item");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="APIBaseExtended", Namespace="http://api.timelog.com")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Task))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Allocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Project))]
    public partial class APIBaseExtended : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private TimecardApp.TimelogProjectManagementService.DataAction ActionField;
        
        private bool IsCustomFieldsLoadedField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.CustomField> CustomFieldsField;
        
        private bool IsExternalKeysLoadedField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ExternalSystemContext> ExternalKeysField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.DataAction Action {
            get {
                return this.ActionField;
            }
            set {
                if ((this.ActionField.Equals(value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCustomFieldsLoaded {
            get {
                return this.IsCustomFieldsLoadedField;
            }
            set {
                if ((this.IsCustomFieldsLoadedField.Equals(value) != true)) {
                    this.IsCustomFieldsLoadedField = value;
                    this.RaisePropertyChanged("IsCustomFieldsLoaded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.CustomField> CustomFields {
            get {
                return this.CustomFieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomFieldsField, value) != true)) {
                    this.CustomFieldsField = value;
                    this.RaisePropertyChanged("CustomFields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public bool IsExternalKeysLoaded {
            get {
                return this.IsExternalKeysLoadedField;
            }
            set {
                if ((this.IsExternalKeysLoadedField.Equals(value) != true)) {
                    this.IsExternalKeysLoadedField = value;
                    this.RaisePropertyChanged("IsExternalKeysLoaded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ExternalSystemContext> ExternalKeys {
            get {
                return this.ExternalKeysField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalKeysField, value) != true)) {
                    this.ExternalKeysField = value;
                    this.RaisePropertyChanged("ExternalKeys");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomField", Namespace="http://api.timelog.com/services/customfield/1_0")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.SecurityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.APIBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfProject>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfTask>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfAllocation>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfWorkUnit>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.APIBaseExtended))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ExternalSystemContext>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ExternalSystemContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Request))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.RequestParameter>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.RequestParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.APIMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlatExternal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfProjectTaskFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Project>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Project))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Task>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Task))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.TaskDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ProjectHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.TaskType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.TaskState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Allocation>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Allocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.AllocationDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.WorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.WorkUnitDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.TaskHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnitFlat>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.WorkUnitFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnitFlatExternal>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.WorkUnitFlatExternal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ProjectTaskFlat>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ProjectTaskFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.CustomerHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.EmployeeHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ExecutionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.DomainType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.DataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.CustomField>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ValueOption>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ValueOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.DataTypeEnum))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ValidateModelEnum))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.APIMessageSeverity))]
    public partial class CustomField : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private string SectionLabelField;
        
        private string SectionIdentField;
        
        private string LabelField;
        
        private string IdentField;
        
        private TimecardApp.TimelogProjectManagementService.DomainType DomainTypeField;
        
        private TimecardApp.TimelogProjectManagementService.DataTypeEnum DataTypeField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ValueOption> DataValuesField;
        
        private object ValueField;
        
        private int SortOrderField;
        
        private TimecardApp.TimelogProjectManagementService.ValidateModelEnum ValidationModelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SectionLabel {
            get {
                return this.SectionLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.SectionLabelField, value) != true)) {
                    this.SectionLabelField = value;
                    this.RaisePropertyChanged("SectionLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string SectionIdent {
            get {
                return this.SectionIdentField;
            }
            set {
                if ((object.ReferenceEquals(this.SectionIdentField, value) != true)) {
                    this.SectionIdentField = value;
                    this.RaisePropertyChanged("SectionIdent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Ident {
            get {
                return this.IdentField;
            }
            set {
                if ((object.ReferenceEquals(this.IdentField, value) != true)) {
                    this.IdentField = value;
                    this.RaisePropertyChanged("Ident");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public TimecardApp.TimelogProjectManagementService.DomainType DomainType {
            get {
                return this.DomainTypeField;
            }
            set {
                if ((this.DomainTypeField.Equals(value) != true)) {
                    this.DomainTypeField = value;
                    this.RaisePropertyChanged("DomainType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public TimecardApp.TimelogProjectManagementService.DataTypeEnum DataType {
            get {
                return this.DataTypeField;
            }
            set {
                if ((this.DataTypeField.Equals(value) != true)) {
                    this.DataTypeField = value;
                    this.RaisePropertyChanged("DataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ValueOption> DataValues {
            get {
                return this.DataValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.DataValuesField, value) != true)) {
                    this.DataValuesField = value;
                    this.RaisePropertyChanged("DataValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public int SortOrder {
            get {
                return this.SortOrderField;
            }
            set {
                if ((this.SortOrderField.Equals(value) != true)) {
                    this.SortOrderField = value;
                    this.RaisePropertyChanged("SortOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public TimecardApp.TimelogProjectManagementService.ValidateModelEnum ValidationModel {
            get {
                return this.ValidationModelField;
            }
            set {
                if ((this.ValidationModelField.Equals(value) != true)) {
                    this.ValidationModelField = value;
                    this.RaisePropertyChanged("ValidationModel");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExternalSystemContext", Namespace="http://api.timelog.com")]
    public partial class ExternalSystemContext : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private string SystemNameField;
        
        private string ExternalIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemName {
            get {
                return this.SystemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemNameField, value) != true)) {
                    this.SystemNameField = value;
                    this.RaisePropertyChanged("SystemName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string ExternalID {
            get {
                return this.ExternalIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIDField, value) != true)) {
                    this.ExternalIDField = value;
                    this.RaisePropertyChanged("ExternalID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class Task : TimecardApp.TimelogProjectManagementService.APIBaseExtended {
        
        private System.Guid IDField;
        
        private int TaskIDField;
        
        private string NameField;
        
        private string FullNameField;
        
        private string NoField;
        
        private string DescriptionField;
        
        private string LinkField;
        
        private double BudgetHoursField;
        
        private double BudgetAmountField;
        
        private System.DateTime StartDateField;
        
        private System.DateTime EndDateField;
        
        private int TaskTypeIDField;
        
        private bool AdditionalTextIsRequiredField;
        
        private TimecardApp.TimelogProjectManagementService.TaskDetails DetailsField;
        
        private TimecardApp.TimelogProjectManagementService.TaskState StateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskID {
            get {
                return this.TaskIDField;
            }
            set {
                if ((this.TaskIDField.Equals(value) != true)) {
                    this.TaskIDField = value;
                    this.RaisePropertyChanged("TaskID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string No {
            get {
                return this.NoField;
            }
            set {
                if ((object.ReferenceEquals(this.NoField, value) != true)) {
                    this.NoField = value;
                    this.RaisePropertyChanged("No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public double BudgetHours {
            get {
                return this.BudgetHoursField;
            }
            set {
                if ((this.BudgetHoursField.Equals(value) != true)) {
                    this.BudgetHoursField = value;
                    this.RaisePropertyChanged("BudgetHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public double BudgetAmount {
            get {
                return this.BudgetAmountField;
            }
            set {
                if ((this.BudgetAmountField.Equals(value) != true)) {
                    this.BudgetAmountField = value;
                    this.RaisePropertyChanged("BudgetAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public int TaskTypeID {
            get {
                return this.TaskTypeIDField;
            }
            set {
                if ((this.TaskTypeIDField.Equals(value) != true)) {
                    this.TaskTypeIDField = value;
                    this.RaisePropertyChanged("TaskTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public bool AdditionalTextIsRequired {
            get {
                return this.AdditionalTextIsRequiredField;
            }
            set {
                if ((this.AdditionalTextIsRequiredField.Equals(value) != true)) {
                    this.AdditionalTextIsRequiredField = value;
                    this.RaisePropertyChanged("AdditionalTextIsRequired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public TimecardApp.TimelogProjectManagementService.TaskDetails Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=14)]
        public TimecardApp.TimelogProjectManagementService.TaskState State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerHeader", Namespace="http://api.timelog.com/services/crm/1_2")]
    public partial class CustomerHeader : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private int IDField;
        
        private string NameField;
        
        private string NoField;
        
        private System.Guid GUIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string No {
            get {
                return this.NoField;
            }
            set {
                if ((object.ReferenceEquals(this.NoField, value) != true)) {
                    this.NoField = value;
                    this.RaisePropertyChanged("No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.Guid GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((this.GUIDField.Equals(value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectHeader", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class ProjectHeader : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private int IDField;
        
        private string NameField;
        
        private string NoField;
        
        private bool IsActiveField;
        
        private bool IsGeneralProjectField;
        
        private System.DateTime StartDateField;
        
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string No {
            get {
                return this.NoField;
            }
            set {
                if ((object.ReferenceEquals(this.NoField, value) != true)) {
                    this.NoField = value;
                    this.RaisePropertyChanged("No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public bool IsGeneralProject {
            get {
                return this.IsGeneralProjectField;
            }
            set {
                if ((this.IsGeneralProjectField.Equals(value) != true)) {
                    this.IsGeneralProjectField = value;
                    this.RaisePropertyChanged("IsGeneralProject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskType", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class TaskType : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private int IDField;
        
        private int ID2Field;
        
        private string NameField;
        
        private string Name2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID2 {
            get {
                return this.ID2Field;
            }
            set {
                if ((this.ID2Field.Equals(value) != true)) {
                    this.ID2Field = value;
                    this.RaisePropertyChanged("ID2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name2 {
            get {
                return this.Name2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Name2Field, value) != true)) {
                    this.Name2Field = value;
                    this.RaisePropertyChanged("Name2");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Allocation", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class Allocation : TimecardApp.TimelogProjectManagementService.APIBaseExtended {
        
        private int AllocationIDField;
        
        private System.Guid IDField;
        
        private int TaskIDField;
        
        private double HoursAllocatedField;
        
        private int HourlyRateIDField;
        
        private int EmployeeIDField;
        
        private System.DateTime StartDateField;
        
        private System.DateTime EndDateField;
        
        private TimecardApp.TimelogProjectManagementService.AllocationDetails DetailsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AllocationID {
            get {
                return this.AllocationIDField;
            }
            set {
                if ((this.AllocationIDField.Equals(value) != true)) {
                    this.AllocationIDField = value;
                    this.RaisePropertyChanged("AllocationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskID {
            get {
                return this.TaskIDField;
            }
            set {
                if ((this.TaskIDField.Equals(value) != true)) {
                    this.TaskIDField = value;
                    this.RaisePropertyChanged("TaskID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public double HoursAllocated {
            get {
                return this.HoursAllocatedField;
            }
            set {
                if ((this.HoursAllocatedField.Equals(value) != true)) {
                    this.HoursAllocatedField = value;
                    this.RaisePropertyChanged("HoursAllocated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public int HourlyRateID {
            get {
                return this.HourlyRateIDField;
            }
            set {
                if ((this.HourlyRateIDField.Equals(value) != true)) {
                    this.HourlyRateIDField = value;
                    this.RaisePropertyChanged("HourlyRateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int EmployeeID {
            get {
                return this.EmployeeIDField;
            }
            set {
                if ((this.EmployeeIDField.Equals(value) != true)) {
                    this.EmployeeIDField = value;
                    this.RaisePropertyChanged("EmployeeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public TimecardApp.TimelogProjectManagementService.AllocationDetails Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmployeeHeader", Namespace="http://www.timelog.com/api/tlp/v1_5")]
    public partial class EmployeeHeader : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Guid IDField;
        
        private int EmployeeIDField;
        
        private string InitialsField;
        
        private string FirstNameField;
        
        private string LastNameField;
        
        private string EmployeeNoField;
        
        private string FullnameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int EmployeeID {
            get {
                return this.EmployeeIDField;
            }
            set {
                if ((this.EmployeeIDField.Equals(value) != true)) {
                    this.EmployeeIDField = value;
                    this.RaisePropertyChanged("EmployeeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Initials {
            get {
                return this.InitialsField;
            }
            set {
                if ((object.ReferenceEquals(this.InitialsField, value) != true)) {
                    this.InitialsField = value;
                    this.RaisePropertyChanged("Initials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string EmployeeNo {
            get {
                return this.EmployeeNoField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeNoField, value) != true)) {
                    this.EmployeeNoField = value;
                    this.RaisePropertyChanged("EmployeeNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Fullname {
            get {
                return this.FullnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullnameField, value) != true)) {
                    this.FullnameField = value;
                    this.RaisePropertyChanged("Fullname");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Project", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class Project : TimecardApp.TimelogProjectManagementService.APIBaseExtended {
        
        private System.Guid IDField;
        
        private int ProjectIDField;
        
        private int CustomerIDField;
        
        private string NameField;
        
        private string NoField;
        
        private string DescriptionField;
        
        private string LinkField;
        
        private System.DateTime StartDateField;
        
        private System.DateTime EndDateField;
        
        private bool IsInternalProjectField;
        
        private int ProjectManagerIDField;
        
        private int AccountManagerIDField;
        
        private int DepartmentHandledByIDField;
        
        private int DepartmentOrderedByIDField;
        
        private int TypeIDField;
        
        private int CategoryIDField;
        
        private int StageIDField;
        
        private int PriceListIDField;
        
        private int PriceGroupIDField;
        
        private double ExchangeRateField;
        
        private int CurrencyIDField;
        
        private double BudgetWorkHoursFixedPriceProjectField;
        
        private double BudgetWorkHoursFixedPriceTasksField;
        
        private double BudgetWorkHoursTimeAndMaterialField;
        
        private double BudgetWorkAmountFixedPriceProjectField;
        
        private double BudgetWorkAmountFixedPriceTasksField;
        
        private double BudgetWorkAmountTimeAndMaterialField;
        
        private double BudgetAmountExpensesField;
        
        private double BudgetAmountTravelExpensesField;
        
        private string PurchaseOrderNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectID {
            get {
                return this.ProjectIDField;
            }
            set {
                if ((this.ProjectIDField.Equals(value) != true)) {
                    this.ProjectIDField = value;
                    this.RaisePropertyChanged("ProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string No {
            get {
                return this.NoField;
            }
            set {
                if ((object.ReferenceEquals(this.NoField, value) != true)) {
                    this.NoField = value;
                    this.RaisePropertyChanged("No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public bool IsInternalProject {
            get {
                return this.IsInternalProjectField;
            }
            set {
                if ((this.IsInternalProjectField.Equals(value) != true)) {
                    this.IsInternalProjectField = value;
                    this.RaisePropertyChanged("IsInternalProject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public int ProjectManagerID {
            get {
                return this.ProjectManagerIDField;
            }
            set {
                if ((this.ProjectManagerIDField.Equals(value) != true)) {
                    this.ProjectManagerIDField = value;
                    this.RaisePropertyChanged("ProjectManagerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public int AccountManagerID {
            get {
                return this.AccountManagerIDField;
            }
            set {
                if ((this.AccountManagerIDField.Equals(value) != true)) {
                    this.AccountManagerIDField = value;
                    this.RaisePropertyChanged("AccountManagerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public int DepartmentHandledByID {
            get {
                return this.DepartmentHandledByIDField;
            }
            set {
                if ((this.DepartmentHandledByIDField.Equals(value) != true)) {
                    this.DepartmentHandledByIDField = value;
                    this.RaisePropertyChanged("DepartmentHandledByID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public int DepartmentOrderedByID {
            get {
                return this.DepartmentOrderedByIDField;
            }
            set {
                if ((this.DepartmentOrderedByIDField.Equals(value) != true)) {
                    this.DepartmentOrderedByIDField = value;
                    this.RaisePropertyChanged("DepartmentOrderedByID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=14)]
        public int TypeID {
            get {
                return this.TypeIDField;
            }
            set {
                if ((this.TypeIDField.Equals(value) != true)) {
                    this.TypeIDField = value;
                    this.RaisePropertyChanged("TypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=15)]
        public int CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=16)]
        public int StageID {
            get {
                return this.StageIDField;
            }
            set {
                if ((this.StageIDField.Equals(value) != true)) {
                    this.StageIDField = value;
                    this.RaisePropertyChanged("StageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=17)]
        public int PriceListID {
            get {
                return this.PriceListIDField;
            }
            set {
                if ((this.PriceListIDField.Equals(value) != true)) {
                    this.PriceListIDField = value;
                    this.RaisePropertyChanged("PriceListID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=18)]
        public int PriceGroupID {
            get {
                return this.PriceGroupIDField;
            }
            set {
                if ((this.PriceGroupIDField.Equals(value) != true)) {
                    this.PriceGroupIDField = value;
                    this.RaisePropertyChanged("PriceGroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=19)]
        public double ExchangeRate {
            get {
                return this.ExchangeRateField;
            }
            set {
                if ((this.ExchangeRateField.Equals(value) != true)) {
                    this.ExchangeRateField = value;
                    this.RaisePropertyChanged("ExchangeRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=20)]
        public int CurrencyID {
            get {
                return this.CurrencyIDField;
            }
            set {
                if ((this.CurrencyIDField.Equals(value) != true)) {
                    this.CurrencyIDField = value;
                    this.RaisePropertyChanged("CurrencyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=21)]
        public double BudgetWorkHoursFixedPriceProject {
            get {
                return this.BudgetWorkHoursFixedPriceProjectField;
            }
            set {
                if ((this.BudgetWorkHoursFixedPriceProjectField.Equals(value) != true)) {
                    this.BudgetWorkHoursFixedPriceProjectField = value;
                    this.RaisePropertyChanged("BudgetWorkHoursFixedPriceProject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=22)]
        public double BudgetWorkHoursFixedPriceTasks {
            get {
                return this.BudgetWorkHoursFixedPriceTasksField;
            }
            set {
                if ((this.BudgetWorkHoursFixedPriceTasksField.Equals(value) != true)) {
                    this.BudgetWorkHoursFixedPriceTasksField = value;
                    this.RaisePropertyChanged("BudgetWorkHoursFixedPriceTasks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=23)]
        public double BudgetWorkHoursTimeAndMaterial {
            get {
                return this.BudgetWorkHoursTimeAndMaterialField;
            }
            set {
                if ((this.BudgetWorkHoursTimeAndMaterialField.Equals(value) != true)) {
                    this.BudgetWorkHoursTimeAndMaterialField = value;
                    this.RaisePropertyChanged("BudgetWorkHoursTimeAndMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=24)]
        public double BudgetWorkAmountFixedPriceProject {
            get {
                return this.BudgetWorkAmountFixedPriceProjectField;
            }
            set {
                if ((this.BudgetWorkAmountFixedPriceProjectField.Equals(value) != true)) {
                    this.BudgetWorkAmountFixedPriceProjectField = value;
                    this.RaisePropertyChanged("BudgetWorkAmountFixedPriceProject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=25)]
        public double BudgetWorkAmountFixedPriceTasks {
            get {
                return this.BudgetWorkAmountFixedPriceTasksField;
            }
            set {
                if ((this.BudgetWorkAmountFixedPriceTasksField.Equals(value) != true)) {
                    this.BudgetWorkAmountFixedPriceTasksField = value;
                    this.RaisePropertyChanged("BudgetWorkAmountFixedPriceTasks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=26)]
        public double BudgetWorkAmountTimeAndMaterial {
            get {
                return this.BudgetWorkAmountTimeAndMaterialField;
            }
            set {
                if ((this.BudgetWorkAmountTimeAndMaterialField.Equals(value) != true)) {
                    this.BudgetWorkAmountTimeAndMaterialField = value;
                    this.RaisePropertyChanged("BudgetWorkAmountTimeAndMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=27)]
        public double BudgetAmountExpenses {
            get {
                return this.BudgetAmountExpensesField;
            }
            set {
                if ((this.BudgetAmountExpensesField.Equals(value) != true)) {
                    this.BudgetAmountExpensesField = value;
                    this.RaisePropertyChanged("BudgetAmountExpenses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=28)]
        public double BudgetAmountTravelExpenses {
            get {
                return this.BudgetAmountTravelExpensesField;
            }
            set {
                if ((this.BudgetAmountTravelExpensesField.Equals(value) != true)) {
                    this.BudgetAmountTravelExpensesField = value;
                    this.RaisePropertyChanged("BudgetAmountTravelExpenses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=29)]
        public string PurchaseOrderNumber {
            get {
                return this.PurchaseOrderNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PurchaseOrderNumberField, value) != true)) {
                    this.PurchaseOrderNumberField = value;
                    this.RaisePropertyChanged("PurchaseOrderNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchContainerOfTask", Namespace="http://www.timelog.com/api/tlp/v1_2")]
    public partial class BatchContainerOfTask : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private TimecardApp.TimelogProjectManagementService.Task ItemField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus StatusField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.Task Item {
            get {
                return this.ItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemField, value) != true)) {
                    this.ItemField = value;
                    this.RaisePropertyChanged("Item");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchContainerOfAllocation", Namespace="http://www.timelog.com/api/tlp/v1_2")]
    public partial class BatchContainerOfAllocation : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private TimecardApp.TimelogProjectManagementService.Allocation ItemField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus StatusField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.Allocation Item {
            get {
                return this.ItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemField, value) != true)) {
                    this.ItemField = value;
                    this.RaisePropertyChanged("Item");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchContainerOfWorkUnit", Namespace="http://www.timelog.com/api/tlp/v1_2")]
    public partial class BatchContainerOfWorkUnit : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private TimecardApp.TimelogProjectManagementService.WorkUnit ItemField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus StatusField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.WorkUnit Item {
            get {
                return this.ItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemField, value) != true)) {
                    this.ItemField = value;
                    this.RaisePropertyChanged("Item");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkUnit", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class WorkUnit : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Guid GUIDField;
        
        private System.Guid AllocationGUIDField;
        
        private int TaskIDField;
        
        private string EmployeeInitialsField;
        
        private System.TimeSpan DurationField;
        
        private System.DateTime StartDateTimeField;
        
        private System.DateTime EndDateTimeField;
        
        private string DescriptionField;
        
        private byte[] TimeStampField;
        
        private bool IsEditableField;
        
        private string AdditionalTextField;
        
        private TimecardApp.TimelogProjectManagementService.WorkUnitDetails DetailsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((this.GUIDField.Equals(value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public System.Guid AllocationGUID {
            get {
                return this.AllocationGUIDField;
            }
            set {
                if ((this.AllocationGUIDField.Equals(value) != true)) {
                    this.AllocationGUIDField = value;
                    this.RaisePropertyChanged("AllocationGUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int TaskID {
            get {
                return this.TaskIDField;
            }
            set {
                if ((this.TaskIDField.Equals(value) != true)) {
                    this.TaskIDField = value;
                    this.RaisePropertyChanged("TaskID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string EmployeeInitials {
            get {
                return this.EmployeeInitialsField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeInitialsField, value) != true)) {
                    this.EmployeeInitialsField = value;
                    this.RaisePropertyChanged("EmployeeInitials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public System.DateTime StartDateTime {
            get {
                return this.StartDateTimeField;
            }
            set {
                if ((this.StartDateTimeField.Equals(value) != true)) {
                    this.StartDateTimeField = value;
                    this.RaisePropertyChanged("StartDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public System.DateTime EndDateTime {
            get {
                return this.EndDateTimeField;
            }
            set {
                if ((this.EndDateTimeField.Equals(value) != true)) {
                    this.EndDateTimeField = value;
                    this.RaisePropertyChanged("EndDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public byte[] TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeStampField, value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public bool IsEditable {
            get {
                return this.IsEditableField;
            }
            set {
                if ((this.IsEditableField.Equals(value) != true)) {
                    this.IsEditableField = value;
                    this.RaisePropertyChanged("IsEditable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public string AdditionalText {
            get {
                return this.AdditionalTextField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalTextField, value) != true)) {
                    this.AdditionalTextField = value;
                    this.RaisePropertyChanged("AdditionalText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public TimecardApp.TimelogProjectManagementService.WorkUnitDetails Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskHeader", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class TaskHeader : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private int IDField;
        
        private string NameField;
        
        private string NoField;
        
        private bool IsActiveField;
        
        private string WBSField;
        
        private string FullNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string No {
            get {
                return this.NoField;
            }
            set {
                if ((object.ReferenceEquals(this.NoField, value) != true)) {
                    this.NoField = value;
                    this.RaisePropertyChanged("No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string WBS {
            get {
                return this.WBSField;
            }
            set {
                if ((object.ReferenceEquals(this.WBSField, value) != true)) {
                    this.WBSField = value;
                    this.RaisePropertyChanged("WBS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfProject", Namespace="http://api.timelog.com")]
    public partial class ResponseOfProject : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Project> ReturnField;
        
        private string ReturnTypeDescriptionField;
        
        private TimecardApp.TimelogProjectManagementService.Request RequestField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseStateField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> MessagesField;
        
        private int ErrorCodeField;
        
        private bool IsReturnPagedField;
        
        private int TotalPageCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Project> Return {
            get {
                return this.ReturnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnField, value) != true)) {
                    this.ReturnField = value;
                    this.RaisePropertyChanged("Return");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnTypeDescription {
            get {
                return this.ReturnTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeDescriptionField, value) != true)) {
                    this.ReturnTypeDescriptionField = value;
                    this.RaisePropertyChanged("ReturnTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.Request Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseState {
            get {
                return this.ResponseStateField;
            }
            set {
                if ((this.ResponseStateField.Equals(value) != true)) {
                    this.ResponseStateField = value;
                    this.RaisePropertyChanged("ResponseState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReturnPaged {
            get {
                return this.IsReturnPagedField;
            }
            set {
                if ((this.IsReturnPagedField.Equals(value) != true)) {
                    this.IsReturnPagedField = value;
                    this.RaisePropertyChanged("IsReturnPaged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int TotalPageCount {
            get {
                return this.TotalPageCountField;
            }
            set {
                if ((this.TotalPageCountField.Equals(value) != true)) {
                    this.TotalPageCountField = value;
                    this.RaisePropertyChanged("TotalPageCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Request", Namespace="http://api.timelog.com")]
    public partial class Request : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.RequestParameter> ParametersField;
        
        private string ServiceClassField;
        
        private string MethodNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.RequestParameter> Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceClass {
            get {
                return this.ServiceClassField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceClassField, value) != true)) {
                    this.ServiceClassField = value;
                    this.RaisePropertyChanged("ServiceClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string MethodName {
            get {
                return this.MethodNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodNameField, value) != true)) {
                    this.MethodNameField = value;
                    this.RaisePropertyChanged("MethodName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfBatchContainerOfProject", Namespace="http://api.timelog.com")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfProject))]
    public partial class ResponseOfBatchContainerOfProject : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfProject> ReturnField;
        
        private string ReturnTypeDescriptionField;
        
        private TimecardApp.TimelogProjectManagementService.Request RequestField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseStateField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> MessagesField;
        
        private int ErrorCodeField;
        
        private bool IsReturnPagedField;
        
        private int TotalPageCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfProject> Return {
            get {
                return this.ReturnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnField, value) != true)) {
                    this.ReturnField = value;
                    this.RaisePropertyChanged("Return");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnTypeDescription {
            get {
                return this.ReturnTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeDescriptionField, value) != true)) {
                    this.ReturnTypeDescriptionField = value;
                    this.RaisePropertyChanged("ReturnTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.Request Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseState {
            get {
                return this.ResponseStateField;
            }
            set {
                if ((this.ResponseStateField.Equals(value) != true)) {
                    this.ResponseStateField = value;
                    this.RaisePropertyChanged("ResponseState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReturnPaged {
            get {
                return this.IsReturnPagedField;
            }
            set {
                if ((this.IsReturnPagedField.Equals(value) != true)) {
                    this.IsReturnPagedField = value;
                    this.RaisePropertyChanged("IsReturnPaged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int TotalPageCount {
            get {
                return this.TotalPageCountField;
            }
            set {
                if ((this.TotalPageCountField.Equals(value) != true)) {
                    this.TotalPageCountField = value;
                    this.RaisePropertyChanged("TotalPageCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchResponseOfProject", Namespace="http://www.timelog.com/api/tlp/v1_2")]
    public partial class BatchResponseOfProject : TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfProject {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfTask", Namespace="http://api.timelog.com")]
    public partial class ResponseOfTask : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Task> ReturnField;
        
        private string ReturnTypeDescriptionField;
        
        private TimecardApp.TimelogProjectManagementService.Request RequestField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseStateField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> MessagesField;
        
        private int ErrorCodeField;
        
        private bool IsReturnPagedField;
        
        private int TotalPageCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Task> Return {
            get {
                return this.ReturnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnField, value) != true)) {
                    this.ReturnField = value;
                    this.RaisePropertyChanged("Return");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnTypeDescription {
            get {
                return this.ReturnTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeDescriptionField, value) != true)) {
                    this.ReturnTypeDescriptionField = value;
                    this.RaisePropertyChanged("ReturnTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.Request Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseState {
            get {
                return this.ResponseStateField;
            }
            set {
                if ((this.ResponseStateField.Equals(value) != true)) {
                    this.ResponseStateField = value;
                    this.RaisePropertyChanged("ResponseState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReturnPaged {
            get {
                return this.IsReturnPagedField;
            }
            set {
                if ((this.IsReturnPagedField.Equals(value) != true)) {
                    this.IsReturnPagedField = value;
                    this.RaisePropertyChanged("IsReturnPaged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int TotalPageCount {
            get {
                return this.TotalPageCountField;
            }
            set {
                if ((this.TotalPageCountField.Equals(value) != true)) {
                    this.TotalPageCountField = value;
                    this.RaisePropertyChanged("TotalPageCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfBatchContainerOfTask", Namespace="http://api.timelog.com")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfTask))]
    public partial class ResponseOfBatchContainerOfTask : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfTask> ReturnField;
        
        private string ReturnTypeDescriptionField;
        
        private TimecardApp.TimelogProjectManagementService.Request RequestField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseStateField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> MessagesField;
        
        private int ErrorCodeField;
        
        private bool IsReturnPagedField;
        
        private int TotalPageCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfTask> Return {
            get {
                return this.ReturnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnField, value) != true)) {
                    this.ReturnField = value;
                    this.RaisePropertyChanged("Return");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnTypeDescription {
            get {
                return this.ReturnTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeDescriptionField, value) != true)) {
                    this.ReturnTypeDescriptionField = value;
                    this.RaisePropertyChanged("ReturnTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.Request Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseState {
            get {
                return this.ResponseStateField;
            }
            set {
                if ((this.ResponseStateField.Equals(value) != true)) {
                    this.ResponseStateField = value;
                    this.RaisePropertyChanged("ResponseState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReturnPaged {
            get {
                return this.IsReturnPagedField;
            }
            set {
                if ((this.IsReturnPagedField.Equals(value) != true)) {
                    this.IsReturnPagedField = value;
                    this.RaisePropertyChanged("IsReturnPaged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int TotalPageCount {
            get {
                return this.TotalPageCountField;
            }
            set {
                if ((this.TotalPageCountField.Equals(value) != true)) {
                    this.TotalPageCountField = value;
                    this.RaisePropertyChanged("TotalPageCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchResponseOfTask", Namespace="http://www.timelog.com/api/tlp/v1_2")]
    public partial class BatchResponseOfTask : TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfTask {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfAllocation", Namespace="http://api.timelog.com")]
    public partial class ResponseOfAllocation : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Allocation> ReturnField;
        
        private string ReturnTypeDescriptionField;
        
        private TimecardApp.TimelogProjectManagementService.Request RequestField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseStateField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> MessagesField;
        
        private int ErrorCodeField;
        
        private bool IsReturnPagedField;
        
        private int TotalPageCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Allocation> Return {
            get {
                return this.ReturnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnField, value) != true)) {
                    this.ReturnField = value;
                    this.RaisePropertyChanged("Return");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnTypeDescription {
            get {
                return this.ReturnTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeDescriptionField, value) != true)) {
                    this.ReturnTypeDescriptionField = value;
                    this.RaisePropertyChanged("ReturnTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.Request Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseState {
            get {
                return this.ResponseStateField;
            }
            set {
                if ((this.ResponseStateField.Equals(value) != true)) {
                    this.ResponseStateField = value;
                    this.RaisePropertyChanged("ResponseState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReturnPaged {
            get {
                return this.IsReturnPagedField;
            }
            set {
                if ((this.IsReturnPagedField.Equals(value) != true)) {
                    this.IsReturnPagedField = value;
                    this.RaisePropertyChanged("IsReturnPaged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int TotalPageCount {
            get {
                return this.TotalPageCountField;
            }
            set {
                if ((this.TotalPageCountField.Equals(value) != true)) {
                    this.TotalPageCountField = value;
                    this.RaisePropertyChanged("TotalPageCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfBatchContainerOfAllocation", Namespace="http://api.timelog.com")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation))]
    public partial class ResponseOfBatchContainerOfAllocation : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfAllocation> ReturnField;
        
        private string ReturnTypeDescriptionField;
        
        private TimecardApp.TimelogProjectManagementService.Request RequestField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseStateField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> MessagesField;
        
        private int ErrorCodeField;
        
        private bool IsReturnPagedField;
        
        private int TotalPageCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfAllocation> Return {
            get {
                return this.ReturnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnField, value) != true)) {
                    this.ReturnField = value;
                    this.RaisePropertyChanged("Return");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnTypeDescription {
            get {
                return this.ReturnTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeDescriptionField, value) != true)) {
                    this.ReturnTypeDescriptionField = value;
                    this.RaisePropertyChanged("ReturnTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.Request Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseState {
            get {
                return this.ResponseStateField;
            }
            set {
                if ((this.ResponseStateField.Equals(value) != true)) {
                    this.ResponseStateField = value;
                    this.RaisePropertyChanged("ResponseState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReturnPaged {
            get {
                return this.IsReturnPagedField;
            }
            set {
                if ((this.IsReturnPagedField.Equals(value) != true)) {
                    this.IsReturnPagedField = value;
                    this.RaisePropertyChanged("IsReturnPaged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int TotalPageCount {
            get {
                return this.TotalPageCountField;
            }
            set {
                if ((this.TotalPageCountField.Equals(value) != true)) {
                    this.TotalPageCountField = value;
                    this.RaisePropertyChanged("TotalPageCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchResponseOfAllocation", Namespace="http://www.timelog.com/api/tlp/v1_2")]
    public partial class BatchResponseOfAllocation : TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfAllocation {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfWorkUnit", Namespace="http://api.timelog.com")]
    public partial class ResponseOfWorkUnit : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> ReturnField;
        
        private string ReturnTypeDescriptionField;
        
        private TimecardApp.TimelogProjectManagementService.Request RequestField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseStateField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> MessagesField;
        
        private int ErrorCodeField;
        
        private bool IsReturnPagedField;
        
        private int TotalPageCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> Return {
            get {
                return this.ReturnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnField, value) != true)) {
                    this.ReturnField = value;
                    this.RaisePropertyChanged("Return");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnTypeDescription {
            get {
                return this.ReturnTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeDescriptionField, value) != true)) {
                    this.ReturnTypeDescriptionField = value;
                    this.RaisePropertyChanged("ReturnTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.Request Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseState {
            get {
                return this.ResponseStateField;
            }
            set {
                if ((this.ResponseStateField.Equals(value) != true)) {
                    this.ResponseStateField = value;
                    this.RaisePropertyChanged("ResponseState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReturnPaged {
            get {
                return this.IsReturnPagedField;
            }
            set {
                if ((this.IsReturnPagedField.Equals(value) != true)) {
                    this.IsReturnPagedField = value;
                    this.RaisePropertyChanged("IsReturnPaged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int TotalPageCount {
            get {
                return this.TotalPageCountField;
            }
            set {
                if ((this.TotalPageCountField.Equals(value) != true)) {
                    this.TotalPageCountField = value;
                    this.RaisePropertyChanged("TotalPageCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfBatchContainerOfWorkUnit", Namespace="http://api.timelog.com")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit))]
    public partial class ResponseOfBatchContainerOfWorkUnit : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfWorkUnit> ReturnField;
        
        private string ReturnTypeDescriptionField;
        
        private TimecardApp.TimelogProjectManagementService.Request RequestField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseStateField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> MessagesField;
        
        private int ErrorCodeField;
        
        private bool IsReturnPagedField;
        
        private int TotalPageCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfWorkUnit> Return {
            get {
                return this.ReturnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnField, value) != true)) {
                    this.ReturnField = value;
                    this.RaisePropertyChanged("Return");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnTypeDescription {
            get {
                return this.ReturnTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeDescriptionField, value) != true)) {
                    this.ReturnTypeDescriptionField = value;
                    this.RaisePropertyChanged("ReturnTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.Request Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseState {
            get {
                return this.ResponseStateField;
            }
            set {
                if ((this.ResponseStateField.Equals(value) != true)) {
                    this.ResponseStateField = value;
                    this.RaisePropertyChanged("ResponseState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReturnPaged {
            get {
                return this.IsReturnPagedField;
            }
            set {
                if ((this.IsReturnPagedField.Equals(value) != true)) {
                    this.IsReturnPagedField = value;
                    this.RaisePropertyChanged("IsReturnPaged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int TotalPageCount {
            get {
                return this.TotalPageCountField;
            }
            set {
                if ((this.TotalPageCountField.Equals(value) != true)) {
                    this.TotalPageCountField = value;
                    this.RaisePropertyChanged("TotalPageCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchResponseOfWorkUnit", Namespace="http://www.timelog.com/api/tlp/v1_2")]
    public partial class BatchResponseOfWorkUnit : TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfWorkUnit {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfWorkUnitFlat", Namespace="http://api.timelog.com")]
    public partial class ResponseOfWorkUnitFlat : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnitFlat> ReturnField;
        
        private string ReturnTypeDescriptionField;
        
        private TimecardApp.TimelogProjectManagementService.Request RequestField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseStateField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> MessagesField;
        
        private int ErrorCodeField;
        
        private bool IsReturnPagedField;
        
        private int TotalPageCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnitFlat> Return {
            get {
                return this.ReturnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnField, value) != true)) {
                    this.ReturnField = value;
                    this.RaisePropertyChanged("Return");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnTypeDescription {
            get {
                return this.ReturnTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeDescriptionField, value) != true)) {
                    this.ReturnTypeDescriptionField = value;
                    this.RaisePropertyChanged("ReturnTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.Request Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseState {
            get {
                return this.ResponseStateField;
            }
            set {
                if ((this.ResponseStateField.Equals(value) != true)) {
                    this.ResponseStateField = value;
                    this.RaisePropertyChanged("ResponseState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReturnPaged {
            get {
                return this.IsReturnPagedField;
            }
            set {
                if ((this.IsReturnPagedField.Equals(value) != true)) {
                    this.IsReturnPagedField = value;
                    this.RaisePropertyChanged("IsReturnPaged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int TotalPageCount {
            get {
                return this.TotalPageCountField;
            }
            set {
                if ((this.TotalPageCountField.Equals(value) != true)) {
                    this.TotalPageCountField = value;
                    this.RaisePropertyChanged("TotalPageCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkUnitFlat", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class WorkUnitFlat : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private string ActionField;
        
        private System.DateTime ActionDateField;
        
        private int ApprovedStatusField;
        
        private System.Guid CustomerGuidField;
        
        private string CustomerNameField;
        
        private string CustomerNoField;
        
        private System.DateTime DateField;
        
        private System.Guid EmployeeDepartmentGuidField;
        
        private string EmployeeDepartmentNameField;
        
        private string EmployeeDepartmentNoField;
        
        private System.Guid EmployeeGuidField;
        
        private string EmployeeInitialsField;
        
        private string EmployeeInternalIdField;
        
        private double HoursField;
        
        private string ProjectCategoryNameField;
        
        private System.Guid ProjectDepartmentGuidField;
        
        private string ProjectDepartmentNameField;
        
        private string ProjectDepartmentNoField;
        
        private System.Guid ProjectGuidField;
        
        private string ProjectNameField;
        
        private string ProjectNoField;
        
        private string ProjectStatusNameField;
        
        private string ProjectTypeNameField;
        
        private string SalaryCodeField;
        
        private System.Guid SalaryCodeGuidField;
        
        private string SalaryCodeNameField;
        
        private System.Guid TaskGuidField;
        
        private string TaskNameField;
        
        private string TaskNameChainField;
        
        private string TaskNoField;
        
        private string TaskNoChainField;
        
        private System.Guid TaskParentGuidField;
        
        private string TaskTypeNameField;
        
        private string TaskWBSField;
        
        private System.Guid WorkUnitGuidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActionDate {
            get {
                return this.ActionDateField;
            }
            set {
                if ((this.ActionDateField.Equals(value) != true)) {
                    this.ActionDateField = value;
                    this.RaisePropertyChanged("ActionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApprovedStatus {
            get {
                return this.ApprovedStatusField;
            }
            set {
                if ((this.ApprovedStatusField.Equals(value) != true)) {
                    this.ApprovedStatusField = value;
                    this.RaisePropertyChanged("ApprovedStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CustomerGuid {
            get {
                return this.CustomerGuidField;
            }
            set {
                if ((this.CustomerGuidField.Equals(value) != true)) {
                    this.CustomerGuidField = value;
                    this.RaisePropertyChanged("CustomerGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerNo {
            get {
                return this.CustomerNoField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNoField, value) != true)) {
                    this.CustomerNoField = value;
                    this.RaisePropertyChanged("CustomerNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EmployeeDepartmentGuid {
            get {
                return this.EmployeeDepartmentGuidField;
            }
            set {
                if ((this.EmployeeDepartmentGuidField.Equals(value) != true)) {
                    this.EmployeeDepartmentGuidField = value;
                    this.RaisePropertyChanged("EmployeeDepartmentGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeDepartmentName {
            get {
                return this.EmployeeDepartmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeDepartmentNameField, value) != true)) {
                    this.EmployeeDepartmentNameField = value;
                    this.RaisePropertyChanged("EmployeeDepartmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeDepartmentNo {
            get {
                return this.EmployeeDepartmentNoField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeDepartmentNoField, value) != true)) {
                    this.EmployeeDepartmentNoField = value;
                    this.RaisePropertyChanged("EmployeeDepartmentNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EmployeeGuid {
            get {
                return this.EmployeeGuidField;
            }
            set {
                if ((this.EmployeeGuidField.Equals(value) != true)) {
                    this.EmployeeGuidField = value;
                    this.RaisePropertyChanged("EmployeeGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeInitials {
            get {
                return this.EmployeeInitialsField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeInitialsField, value) != true)) {
                    this.EmployeeInitialsField = value;
                    this.RaisePropertyChanged("EmployeeInitials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeInternalId {
            get {
                return this.EmployeeInternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeInternalIdField, value) != true)) {
                    this.EmployeeInternalIdField = value;
                    this.RaisePropertyChanged("EmployeeInternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((this.HoursField.Equals(value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectCategoryName {
            get {
                return this.ProjectCategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectCategoryNameField, value) != true)) {
                    this.ProjectCategoryNameField = value;
                    this.RaisePropertyChanged("ProjectCategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ProjectDepartmentGuid {
            get {
                return this.ProjectDepartmentGuidField;
            }
            set {
                if ((this.ProjectDepartmentGuidField.Equals(value) != true)) {
                    this.ProjectDepartmentGuidField = value;
                    this.RaisePropertyChanged("ProjectDepartmentGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectDepartmentName {
            get {
                return this.ProjectDepartmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectDepartmentNameField, value) != true)) {
                    this.ProjectDepartmentNameField = value;
                    this.RaisePropertyChanged("ProjectDepartmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectDepartmentNo {
            get {
                return this.ProjectDepartmentNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectDepartmentNoField, value) != true)) {
                    this.ProjectDepartmentNoField = value;
                    this.RaisePropertyChanged("ProjectDepartmentNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ProjectGuid {
            get {
                return this.ProjectGuidField;
            }
            set {
                if ((this.ProjectGuidField.Equals(value) != true)) {
                    this.ProjectGuidField = value;
                    this.RaisePropertyChanged("ProjectGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectNo {
            get {
                return this.ProjectNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNoField, value) != true)) {
                    this.ProjectNoField = value;
                    this.RaisePropertyChanged("ProjectNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectStatusName {
            get {
                return this.ProjectStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectStatusNameField, value) != true)) {
                    this.ProjectStatusNameField = value;
                    this.RaisePropertyChanged("ProjectStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectTypeName {
            get {
                return this.ProjectTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectTypeNameField, value) != true)) {
                    this.ProjectTypeNameField = value;
                    this.RaisePropertyChanged("ProjectTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SalaryCode {
            get {
                return this.SalaryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SalaryCodeField, value) != true)) {
                    this.SalaryCodeField = value;
                    this.RaisePropertyChanged("SalaryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SalaryCodeGuid {
            get {
                return this.SalaryCodeGuidField;
            }
            set {
                if ((this.SalaryCodeGuidField.Equals(value) != true)) {
                    this.SalaryCodeGuidField = value;
                    this.RaisePropertyChanged("SalaryCodeGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SalaryCodeName {
            get {
                return this.SalaryCodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SalaryCodeNameField, value) != true)) {
                    this.SalaryCodeNameField = value;
                    this.RaisePropertyChanged("SalaryCodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TaskGuid {
            get {
                return this.TaskGuidField;
            }
            set {
                if ((this.TaskGuidField.Equals(value) != true)) {
                    this.TaskGuidField = value;
                    this.RaisePropertyChanged("TaskGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskName {
            get {
                return this.TaskNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNameField, value) != true)) {
                    this.TaskNameField = value;
                    this.RaisePropertyChanged("TaskName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskNameChain {
            get {
                return this.TaskNameChainField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNameChainField, value) != true)) {
                    this.TaskNameChainField = value;
                    this.RaisePropertyChanged("TaskNameChain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskNo {
            get {
                return this.TaskNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNoField, value) != true)) {
                    this.TaskNoField = value;
                    this.RaisePropertyChanged("TaskNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskNoChain {
            get {
                return this.TaskNoChainField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNoChainField, value) != true)) {
                    this.TaskNoChainField = value;
                    this.RaisePropertyChanged("TaskNoChain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TaskParentGuid {
            get {
                return this.TaskParentGuidField;
            }
            set {
                if ((this.TaskParentGuidField.Equals(value) != true)) {
                    this.TaskParentGuidField = value;
                    this.RaisePropertyChanged("TaskParentGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskTypeName {
            get {
                return this.TaskTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskTypeNameField, value) != true)) {
                    this.TaskTypeNameField = value;
                    this.RaisePropertyChanged("TaskTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskWBS {
            get {
                return this.TaskWBSField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskWBSField, value) != true)) {
                    this.TaskWBSField = value;
                    this.RaisePropertyChanged("TaskWBS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid WorkUnitGuid {
            get {
                return this.WorkUnitGuidField;
            }
            set {
                if ((this.WorkUnitGuidField.Equals(value) != true)) {
                    this.WorkUnitGuidField = value;
                    this.RaisePropertyChanged("WorkUnitGuid");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfWorkUnitFlatExternal", Namespace="http://api.timelog.com")]
    public partial class ResponseOfWorkUnitFlatExternal : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnitFlatExternal> ReturnField;
        
        private string ReturnTypeDescriptionField;
        
        private TimecardApp.TimelogProjectManagementService.Request RequestField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseStateField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> MessagesField;
        
        private int ErrorCodeField;
        
        private bool IsReturnPagedField;
        
        private int TotalPageCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnitFlatExternal> Return {
            get {
                return this.ReturnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnField, value) != true)) {
                    this.ReturnField = value;
                    this.RaisePropertyChanged("Return");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnTypeDescription {
            get {
                return this.ReturnTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeDescriptionField, value) != true)) {
                    this.ReturnTypeDescriptionField = value;
                    this.RaisePropertyChanged("ReturnTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.Request Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseState {
            get {
                return this.ResponseStateField;
            }
            set {
                if ((this.ResponseStateField.Equals(value) != true)) {
                    this.ResponseStateField = value;
                    this.RaisePropertyChanged("ResponseState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReturnPaged {
            get {
                return this.IsReturnPagedField;
            }
            set {
                if ((this.IsReturnPagedField.Equals(value) != true)) {
                    this.IsReturnPagedField = value;
                    this.RaisePropertyChanged("IsReturnPaged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int TotalPageCount {
            get {
                return this.TotalPageCountField;
            }
            set {
                if ((this.TotalPageCountField.Equals(value) != true)) {
                    this.TotalPageCountField = value;
                    this.RaisePropertyChanged("TotalPageCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkUnitFlatExternal", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class WorkUnitFlatExternal : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private string ActionField;
        
        private System.DateTime ActionDateField;
        
        private int ApprovedStatusField;
        
        private string CustomerExternalIdField;
        
        private System.Guid CustomerGuidField;
        
        private string CustomerNameField;
        
        private string CustomerNoField;
        
        private System.DateTime DateField;
        
        private System.Guid EmployeeDepartmentGuidField;
        
        private string EmployeeDepartmentNameField;
        
        private string EmployeeDepartmentNoField;
        
        private System.Guid EmployeeGuidField;
        
        private string EmployeeInitialsField;
        
        private string EmployeeInternalIdField;
        
        private double HoursField;
        
        private string ProjectCategoryNameField;
        
        private System.Guid ProjectDepartmentGuidField;
        
        private string ProjectDepartmentNameField;
        
        private string ProjectDepartmentNoField;
        
        private string ProjectExternalIdField;
        
        private System.Guid ProjectGuidField;
        
        private string ProjectNameField;
        
        private string ProjectNoField;
        
        private string ProjectStatusNameField;
        
        private string ProjectTypeNameField;
        
        private string SalaryCodeField;
        
        private System.Guid SalaryCodeGuidField;
        
        private string SalaryCodeNameField;
        
        private string TaskExternalIdField;
        
        private System.Guid TaskGuidField;
        
        private string TaskNameField;
        
        private string TaskNameChainField;
        
        private string TaskNoField;
        
        private string TaskNoChainField;
        
        private System.Guid TaskParentGuidField;
        
        private string TaskTypeNameField;
        
        private string TaskWBSField;
        
        private System.Guid WorkUnitGuidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActionDate {
            get {
                return this.ActionDateField;
            }
            set {
                if ((this.ActionDateField.Equals(value) != true)) {
                    this.ActionDateField = value;
                    this.RaisePropertyChanged("ActionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApprovedStatus {
            get {
                return this.ApprovedStatusField;
            }
            set {
                if ((this.ApprovedStatusField.Equals(value) != true)) {
                    this.ApprovedStatusField = value;
                    this.RaisePropertyChanged("ApprovedStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerExternalId {
            get {
                return this.CustomerExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerExternalIdField, value) != true)) {
                    this.CustomerExternalIdField = value;
                    this.RaisePropertyChanged("CustomerExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CustomerGuid {
            get {
                return this.CustomerGuidField;
            }
            set {
                if ((this.CustomerGuidField.Equals(value) != true)) {
                    this.CustomerGuidField = value;
                    this.RaisePropertyChanged("CustomerGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerNo {
            get {
                return this.CustomerNoField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNoField, value) != true)) {
                    this.CustomerNoField = value;
                    this.RaisePropertyChanged("CustomerNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EmployeeDepartmentGuid {
            get {
                return this.EmployeeDepartmentGuidField;
            }
            set {
                if ((this.EmployeeDepartmentGuidField.Equals(value) != true)) {
                    this.EmployeeDepartmentGuidField = value;
                    this.RaisePropertyChanged("EmployeeDepartmentGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeDepartmentName {
            get {
                return this.EmployeeDepartmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeDepartmentNameField, value) != true)) {
                    this.EmployeeDepartmentNameField = value;
                    this.RaisePropertyChanged("EmployeeDepartmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeDepartmentNo {
            get {
                return this.EmployeeDepartmentNoField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeDepartmentNoField, value) != true)) {
                    this.EmployeeDepartmentNoField = value;
                    this.RaisePropertyChanged("EmployeeDepartmentNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EmployeeGuid {
            get {
                return this.EmployeeGuidField;
            }
            set {
                if ((this.EmployeeGuidField.Equals(value) != true)) {
                    this.EmployeeGuidField = value;
                    this.RaisePropertyChanged("EmployeeGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeInitials {
            get {
                return this.EmployeeInitialsField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeInitialsField, value) != true)) {
                    this.EmployeeInitialsField = value;
                    this.RaisePropertyChanged("EmployeeInitials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeInternalId {
            get {
                return this.EmployeeInternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeInternalIdField, value) != true)) {
                    this.EmployeeInternalIdField = value;
                    this.RaisePropertyChanged("EmployeeInternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((this.HoursField.Equals(value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectCategoryName {
            get {
                return this.ProjectCategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectCategoryNameField, value) != true)) {
                    this.ProjectCategoryNameField = value;
                    this.RaisePropertyChanged("ProjectCategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ProjectDepartmentGuid {
            get {
                return this.ProjectDepartmentGuidField;
            }
            set {
                if ((this.ProjectDepartmentGuidField.Equals(value) != true)) {
                    this.ProjectDepartmentGuidField = value;
                    this.RaisePropertyChanged("ProjectDepartmentGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectDepartmentName {
            get {
                return this.ProjectDepartmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectDepartmentNameField, value) != true)) {
                    this.ProjectDepartmentNameField = value;
                    this.RaisePropertyChanged("ProjectDepartmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectDepartmentNo {
            get {
                return this.ProjectDepartmentNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectDepartmentNoField, value) != true)) {
                    this.ProjectDepartmentNoField = value;
                    this.RaisePropertyChanged("ProjectDepartmentNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectExternalId {
            get {
                return this.ProjectExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectExternalIdField, value) != true)) {
                    this.ProjectExternalIdField = value;
                    this.RaisePropertyChanged("ProjectExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ProjectGuid {
            get {
                return this.ProjectGuidField;
            }
            set {
                if ((this.ProjectGuidField.Equals(value) != true)) {
                    this.ProjectGuidField = value;
                    this.RaisePropertyChanged("ProjectGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectNo {
            get {
                return this.ProjectNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNoField, value) != true)) {
                    this.ProjectNoField = value;
                    this.RaisePropertyChanged("ProjectNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectStatusName {
            get {
                return this.ProjectStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectStatusNameField, value) != true)) {
                    this.ProjectStatusNameField = value;
                    this.RaisePropertyChanged("ProjectStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectTypeName {
            get {
                return this.ProjectTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectTypeNameField, value) != true)) {
                    this.ProjectTypeNameField = value;
                    this.RaisePropertyChanged("ProjectTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SalaryCode {
            get {
                return this.SalaryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SalaryCodeField, value) != true)) {
                    this.SalaryCodeField = value;
                    this.RaisePropertyChanged("SalaryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SalaryCodeGuid {
            get {
                return this.SalaryCodeGuidField;
            }
            set {
                if ((this.SalaryCodeGuidField.Equals(value) != true)) {
                    this.SalaryCodeGuidField = value;
                    this.RaisePropertyChanged("SalaryCodeGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SalaryCodeName {
            get {
                return this.SalaryCodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SalaryCodeNameField, value) != true)) {
                    this.SalaryCodeNameField = value;
                    this.RaisePropertyChanged("SalaryCodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskExternalId {
            get {
                return this.TaskExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskExternalIdField, value) != true)) {
                    this.TaskExternalIdField = value;
                    this.RaisePropertyChanged("TaskExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TaskGuid {
            get {
                return this.TaskGuidField;
            }
            set {
                if ((this.TaskGuidField.Equals(value) != true)) {
                    this.TaskGuidField = value;
                    this.RaisePropertyChanged("TaskGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskName {
            get {
                return this.TaskNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNameField, value) != true)) {
                    this.TaskNameField = value;
                    this.RaisePropertyChanged("TaskName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskNameChain {
            get {
                return this.TaskNameChainField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNameChainField, value) != true)) {
                    this.TaskNameChainField = value;
                    this.RaisePropertyChanged("TaskNameChain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskNo {
            get {
                return this.TaskNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNoField, value) != true)) {
                    this.TaskNoField = value;
                    this.RaisePropertyChanged("TaskNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskNoChain {
            get {
                return this.TaskNoChainField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNoChainField, value) != true)) {
                    this.TaskNoChainField = value;
                    this.RaisePropertyChanged("TaskNoChain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TaskParentGuid {
            get {
                return this.TaskParentGuidField;
            }
            set {
                if ((this.TaskParentGuidField.Equals(value) != true)) {
                    this.TaskParentGuidField = value;
                    this.RaisePropertyChanged("TaskParentGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskTypeName {
            get {
                return this.TaskTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskTypeNameField, value) != true)) {
                    this.TaskTypeNameField = value;
                    this.RaisePropertyChanged("TaskTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskWBS {
            get {
                return this.TaskWBSField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskWBSField, value) != true)) {
                    this.TaskWBSField = value;
                    this.RaisePropertyChanged("TaskWBS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid WorkUnitGuid {
            get {
                return this.WorkUnitGuidField;
            }
            set {
                if ((this.WorkUnitGuidField.Equals(value) != true)) {
                    this.WorkUnitGuidField = value;
                    this.RaisePropertyChanged("WorkUnitGuid");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfProjectTaskFlat", Namespace="http://api.timelog.com")]
    public partial class ResponseOfProjectTaskFlat : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ProjectTaskFlat> ReturnField;
        
        private string ReturnTypeDescriptionField;
        
        private TimecardApp.TimelogProjectManagementService.Request RequestField;
        
        private TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseStateField;
        
        private System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> MessagesField;
        
        private int ErrorCodeField;
        
        private bool IsReturnPagedField;
        
        private int TotalPageCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ProjectTaskFlat> Return {
            get {
                return this.ReturnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnField, value) != true)) {
                    this.ReturnField = value;
                    this.RaisePropertyChanged("Return");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnTypeDescription {
            get {
                return this.ReturnTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeDescriptionField, value) != true)) {
                    this.ReturnTypeDescriptionField = value;
                    this.RaisePropertyChanged("ReturnTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.Request Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public TimecardApp.TimelogProjectManagementService.ExecutionStatus ResponseState {
            get {
                return this.ResponseStateField;
            }
            set {
                if ((this.ResponseStateField.Equals(value) != true)) {
                    this.ResponseStateField = value;
                    this.RaisePropertyChanged("ResponseState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReturnPaged {
            get {
                return this.IsReturnPagedField;
            }
            set {
                if ((this.IsReturnPagedField.Equals(value) != true)) {
                    this.IsReturnPagedField = value;
                    this.RaisePropertyChanged("IsReturnPaged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int TotalPageCount {
            get {
                return this.TotalPageCountField;
            }
            set {
                if ((this.TotalPageCountField.Equals(value) != true)) {
                    this.TotalPageCountField = value;
                    this.RaisePropertyChanged("TotalPageCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectTaskFlat", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class ProjectTaskFlat : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private System.Guid CustomerGuidField;
        
        private string CustomerNameField;
        
        private string CustomerNoField;
        
        private string ProjectCategoryNameField;
        
        private System.Guid ProjectDepartmentGuidField;
        
        private string ProjectDepartmentNameField;
        
        private string ProjectDepartmentNoField;
        
        private System.Guid ProjectGuidField;
        
        private string ProjectNameField;
        
        private string ProjectNoField;
        
        private string ProjectStatusNameField;
        
        private string ProjectTypeNameField;
        
        private double TaskBudgetAmountField;
        
        private double TaskBudgetHoursField;
        
        private string TaskDescriptionField;
        
        private System.DateTime TaskEndDateField;
        
        private System.Guid TaskGuidField;
        
        private double TaskHourlyRateAmountField;
        
        private string TaskHourlyRateNameField;
        
        private string TaskInvoicingTypeField;
        
        private bool TaskIsBillableField;
        
        private bool TaskIsReadyForInvoicingField;
        
        private string TaskLinkField;
        
        private string TaskNameField;
        
        private string TaskNameChainField;
        
        private string TaskNoField;
        
        private string TaskNoChainField;
        
        private System.Guid TaskParentGuidField;
        
        private System.DateTime TaskStartDateField;
        
        private string TaskStatusField;
        
        private string TaskTypeNameField;
        
        private string TaskWBSField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CustomerGuid {
            get {
                return this.CustomerGuidField;
            }
            set {
                if ((this.CustomerGuidField.Equals(value) != true)) {
                    this.CustomerGuidField = value;
                    this.RaisePropertyChanged("CustomerGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerNo {
            get {
                return this.CustomerNoField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNoField, value) != true)) {
                    this.CustomerNoField = value;
                    this.RaisePropertyChanged("CustomerNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectCategoryName {
            get {
                return this.ProjectCategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectCategoryNameField, value) != true)) {
                    this.ProjectCategoryNameField = value;
                    this.RaisePropertyChanged("ProjectCategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ProjectDepartmentGuid {
            get {
                return this.ProjectDepartmentGuidField;
            }
            set {
                if ((this.ProjectDepartmentGuidField.Equals(value) != true)) {
                    this.ProjectDepartmentGuidField = value;
                    this.RaisePropertyChanged("ProjectDepartmentGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectDepartmentName {
            get {
                return this.ProjectDepartmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectDepartmentNameField, value) != true)) {
                    this.ProjectDepartmentNameField = value;
                    this.RaisePropertyChanged("ProjectDepartmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectDepartmentNo {
            get {
                return this.ProjectDepartmentNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectDepartmentNoField, value) != true)) {
                    this.ProjectDepartmentNoField = value;
                    this.RaisePropertyChanged("ProjectDepartmentNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ProjectGuid {
            get {
                return this.ProjectGuidField;
            }
            set {
                if ((this.ProjectGuidField.Equals(value) != true)) {
                    this.ProjectGuidField = value;
                    this.RaisePropertyChanged("ProjectGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectNo {
            get {
                return this.ProjectNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNoField, value) != true)) {
                    this.ProjectNoField = value;
                    this.RaisePropertyChanged("ProjectNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectStatusName {
            get {
                return this.ProjectStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectStatusNameField, value) != true)) {
                    this.ProjectStatusNameField = value;
                    this.RaisePropertyChanged("ProjectStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectTypeName {
            get {
                return this.ProjectTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectTypeNameField, value) != true)) {
                    this.ProjectTypeNameField = value;
                    this.RaisePropertyChanged("ProjectTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TaskBudgetAmount {
            get {
                return this.TaskBudgetAmountField;
            }
            set {
                if ((this.TaskBudgetAmountField.Equals(value) != true)) {
                    this.TaskBudgetAmountField = value;
                    this.RaisePropertyChanged("TaskBudgetAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TaskBudgetHours {
            get {
                return this.TaskBudgetHoursField;
            }
            set {
                if ((this.TaskBudgetHoursField.Equals(value) != true)) {
                    this.TaskBudgetHoursField = value;
                    this.RaisePropertyChanged("TaskBudgetHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskDescription {
            get {
                return this.TaskDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskDescriptionField, value) != true)) {
                    this.TaskDescriptionField = value;
                    this.RaisePropertyChanged("TaskDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TaskEndDate {
            get {
                return this.TaskEndDateField;
            }
            set {
                if ((this.TaskEndDateField.Equals(value) != true)) {
                    this.TaskEndDateField = value;
                    this.RaisePropertyChanged("TaskEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TaskGuid {
            get {
                return this.TaskGuidField;
            }
            set {
                if ((this.TaskGuidField.Equals(value) != true)) {
                    this.TaskGuidField = value;
                    this.RaisePropertyChanged("TaskGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TaskHourlyRateAmount {
            get {
                return this.TaskHourlyRateAmountField;
            }
            set {
                if ((this.TaskHourlyRateAmountField.Equals(value) != true)) {
                    this.TaskHourlyRateAmountField = value;
                    this.RaisePropertyChanged("TaskHourlyRateAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskHourlyRateName {
            get {
                return this.TaskHourlyRateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskHourlyRateNameField, value) != true)) {
                    this.TaskHourlyRateNameField = value;
                    this.RaisePropertyChanged("TaskHourlyRateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskInvoicingType {
            get {
                return this.TaskInvoicingTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskInvoicingTypeField, value) != true)) {
                    this.TaskInvoicingTypeField = value;
                    this.RaisePropertyChanged("TaskInvoicingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TaskIsBillable {
            get {
                return this.TaskIsBillableField;
            }
            set {
                if ((this.TaskIsBillableField.Equals(value) != true)) {
                    this.TaskIsBillableField = value;
                    this.RaisePropertyChanged("TaskIsBillable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TaskIsReadyForInvoicing {
            get {
                return this.TaskIsReadyForInvoicingField;
            }
            set {
                if ((this.TaskIsReadyForInvoicingField.Equals(value) != true)) {
                    this.TaskIsReadyForInvoicingField = value;
                    this.RaisePropertyChanged("TaskIsReadyForInvoicing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskLink {
            get {
                return this.TaskLinkField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskLinkField, value) != true)) {
                    this.TaskLinkField = value;
                    this.RaisePropertyChanged("TaskLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskName {
            get {
                return this.TaskNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNameField, value) != true)) {
                    this.TaskNameField = value;
                    this.RaisePropertyChanged("TaskName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskNameChain {
            get {
                return this.TaskNameChainField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNameChainField, value) != true)) {
                    this.TaskNameChainField = value;
                    this.RaisePropertyChanged("TaskNameChain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskNo {
            get {
                return this.TaskNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNoField, value) != true)) {
                    this.TaskNoField = value;
                    this.RaisePropertyChanged("TaskNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskNoChain {
            get {
                return this.TaskNoChainField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNoChainField, value) != true)) {
                    this.TaskNoChainField = value;
                    this.RaisePropertyChanged("TaskNoChain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TaskParentGuid {
            get {
                return this.TaskParentGuidField;
            }
            set {
                if ((this.TaskParentGuidField.Equals(value) != true)) {
                    this.TaskParentGuidField = value;
                    this.RaisePropertyChanged("TaskParentGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TaskStartDate {
            get {
                return this.TaskStartDateField;
            }
            set {
                if ((this.TaskStartDateField.Equals(value) != true)) {
                    this.TaskStartDateField = value;
                    this.RaisePropertyChanged("TaskStartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskStatus {
            get {
                return this.TaskStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskStatusField, value) != true)) {
                    this.TaskStatusField = value;
                    this.RaisePropertyChanged("TaskStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskTypeName {
            get {
                return this.TaskTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskTypeNameField, value) != true)) {
                    this.TaskTypeNameField = value;
                    this.RaisePropertyChanged("TaskTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskWBS {
            get {
                return this.TaskWBSField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskWBSField, value) != true)) {
                    this.TaskWBSField = value;
                    this.RaisePropertyChanged("TaskWBS");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityToken", Namespace="http://www.timelog.com/api/tlp/v1_3")]
    public partial class SecurityToken : TimecardApp.TimelogProjectManagementService.APIBase {
        
        private string InitialsField;
        
        private System.DateTime ExpiresField;
        
        private string HashField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Initials {
            get {
                return this.InitialsField;
            }
            set {
                if ((object.ReferenceEquals(this.InitialsField, value) != true)) {
                    this.InitialsField = value;
                    this.RaisePropertyChanged("Initials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=1)]
        public System.DateTime Expires {
            get {
                return this.ExpiresField;
            }
            set {
                if ((this.ExpiresField.Equals(value) != true)) {
                    this.ExpiresField = value;
                    this.RaisePropertyChanged("Expires");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=2)]
        public string Hash {
            get {
                return this.HashField;
            }
            set {
                if ((object.ReferenceEquals(this.HashField, value) != true)) {
                    this.HashField = value;
                    this.RaisePropertyChanged("Hash");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecutionStatus", Namespace="http://schemas.datacontract.org/2004/07/TimeLog.TLP.Common")]
    public enum ExecutionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotSet = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Invalid = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataAction", Namespace="http://schemas.datacontract.org/2004/07/TimeLog.TLP.Attributes")]
    public enum DataAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Original = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Created = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Updated = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = 99,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestParameter", Namespace="http://api.timelog.com")]
    public partial class RequestParameter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="APIMessage", Namespace="http://api.timelog.com")]
    public partial class APIMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string MessageField;
        
        private TimecardApp.TimelogProjectManagementService.APIMessageSeverity SeverityField;
        
        private int ErrorCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.APIMessageSeverity Severity {
            get {
                return this.SeverityField;
            }
            set {
                if ((this.SeverityField.Equals(value) != true)) {
                    this.SeverityField = value;
                    this.RaisePropertyChanged("Severity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskDetails", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class TaskDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TimecardApp.TimelogProjectManagementService.CustomerHeader CustomerHeaderField;
        
        private TimecardApp.TimelogProjectManagementService.ProjectHeader ProjectHeaderField;
        
        private TimecardApp.TimelogProjectManagementService.TaskType TypeField;
        
        private System.Xml.Linq.XElement CustomFieldField;
        
        private string WBSField;
        
        private bool IsParentField;
        
        private int ParentTaskIDField;
        
        private int SortOrderField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.CustomerHeader CustomerHeader {
            get {
                return this.CustomerHeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerHeaderField, value) != true)) {
                    this.CustomerHeaderField = value;
                    this.RaisePropertyChanged("CustomerHeader");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.ProjectHeader ProjectHeader {
            get {
                return this.ProjectHeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectHeaderField, value) != true)) {
                    this.ProjectHeaderField = value;
                    this.RaisePropertyChanged("ProjectHeader");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.TaskType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.Xml.Linq.XElement CustomField {
            get {
                return this.CustomFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomFieldField, value) != true)) {
                    this.CustomFieldField = value;
                    this.RaisePropertyChanged("CustomField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string WBS {
            get {
                return this.WBSField;
            }
            set {
                if ((object.ReferenceEquals(this.WBSField, value) != true)) {
                    this.WBSField = value;
                    this.RaisePropertyChanged("WBS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public bool IsParent {
            get {
                return this.IsParentField;
            }
            set {
                if ((this.IsParentField.Equals(value) != true)) {
                    this.IsParentField = value;
                    this.RaisePropertyChanged("IsParent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public int ParentTaskID {
            get {
                return this.ParentTaskIDField;
            }
            set {
                if ((this.ParentTaskIDField.Equals(value) != true)) {
                    this.ParentTaskIDField = value;
                    this.RaisePropertyChanged("ParentTaskID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public int SortOrder {
            get {
                return this.SortOrderField;
            }
            set {
                if ((this.SortOrderField.Equals(value) != true)) {
                    this.SortOrderField = value;
                    this.RaisePropertyChanged("SortOrder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskState", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class TaskState : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool IsActiveField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AllocationDetails", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class AllocationDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TimecardApp.TimelogProjectManagementService.EmployeeHeader EmployeeHeaderField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.EmployeeHeader EmployeeHeader {
            get {
                return this.EmployeeHeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeHeaderField, value) != true)) {
                    this.EmployeeHeaderField = value;
                    this.RaisePropertyChanged("EmployeeHeader");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkUnitDetails", Namespace="http://www.timelog.com/api/tlp/v1_6")]
    public partial class WorkUnitDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TimecardApp.TimelogProjectManagementService.TaskHeader TaskHeaderField;
        
        private TimecardApp.TimelogProjectManagementService.ProjectHeader ProjectHeaderField;
        
        private TimecardApp.TimelogProjectManagementService.CustomerHeader CustomerHeaderField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimecardApp.TimelogProjectManagementService.TaskHeader TaskHeader {
            get {
                return this.TaskHeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskHeaderField, value) != true)) {
                    this.TaskHeaderField = value;
                    this.RaisePropertyChanged("TaskHeader");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public TimecardApp.TimelogProjectManagementService.ProjectHeader ProjectHeader {
            get {
                return this.ProjectHeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectHeaderField, value) != true)) {
                    this.ProjectHeaderField = value;
                    this.RaisePropertyChanged("ProjectHeader");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public TimecardApp.TimelogProjectManagementService.CustomerHeader CustomerHeader {
            get {
                return this.CustomerHeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerHeaderField, value) != true)) {
                    this.CustomerHeaderField = value;
                    this.RaisePropertyChanged("CustomerHeader");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DomainType", Namespace="http://schemas.datacontract.org/2004/07/TimeLog.TLP.Common")]
    public enum DomainType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Customer = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Contact = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DescriptionType = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BillingCode = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrintTemplateElement = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Currency = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExternalSystem = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TaskCategory = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Industry = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Country = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExtractionTemplateElement = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WorkUnit = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HourlyRate = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IntegrationContext = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrintTemplate = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExchangeRate = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceableDisbursement = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TaskType = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Voucher = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TaskType2 = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Invoice = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SupportTicket = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceableWorkUnit = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceableSupportContract = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreditNote = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProductNumber = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExtractionTemplate = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CustomerStatus = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CustomerHeader = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Reminder = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ETCEmployee = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProjectTemplateHeader = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Event = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceableTravelExpense = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceableInstallment = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Employee = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceableRaw = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Milestone = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disbursement = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IntegrationEventContext = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountingPeriod = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProjectResource = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Allocation = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceLine = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProjectResourceGroup = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TaskHeader = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PaymentTerm = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceableSupportUnit = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        File = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BillingPlan = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Project = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TimeLogExchangeRate = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProjectType = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProjectCategory = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Milleage = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Allowances = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Accomodation = 57,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DomainProductNoCarrier = 58,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProjectHeader = 59,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProjectOrderStatus = 60,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SupportJournalPost = 61,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Department = 62,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EmployeeMachineMapping = 63,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HostingContract = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpenseType = 65,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProjectType2 = 66,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SupportType = 67,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TimeOff = 68,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LicenseType = 69,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LicenseTypeRange = 70,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ContractLicense = 71,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ContractLicenseRange = 72,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceLineExport = 73,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DashboardWidget = 74,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DashboardItem = 75,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Notification = 76,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AuditLog = 77,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceableCurrencyDifferent = 78,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EmployeeType = 79,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EmployeeCostRate = 80,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MileageRate = 81,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PriceList = 82,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CurrencyList = 83,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Service = 84,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceableRounding = 85,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PaymentMethod = 86,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SalaryCode = 87,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SalaryCodeGroup = 88,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Process = 89,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FinancialIntegration = 94,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CustomFieldSection = 90,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CustomFieldDefinition = 91,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IntegrationTransaction = 92,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IntegrationTransactionLog = 93,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NormalWorkweek = 95,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllowanceLegislation = 96,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HolidayCalendar = 97,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Task = 98,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotSpecified = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValueOption", Namespace="http://api.timelog.com/services/customfield/1_0")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.SecurityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.APIBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfProject>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfTask>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfAllocation>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.BatchContainerOfWorkUnit>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.BatchContainerOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.APIBaseExtended))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ExternalSystemContext>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ExternalSystemContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Request))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.RequestParameter>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.RequestParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.APIMessage>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.APIMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfBatchContainerOfWorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlatExternal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ResponseOfProjectTaskFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Project>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Project))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Task>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Task))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.TaskDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ProjectHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.TaskType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.TaskState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Allocation>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.Allocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.AllocationDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.WorkUnit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.WorkUnitDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.TaskHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnitFlat>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.WorkUnitFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnitFlatExternal>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.WorkUnitFlatExternal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ProjectTaskFlat>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ProjectTaskFlat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.CustomerHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.EmployeeHeader))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ExecutionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.DomainType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.DataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.CustomField>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.CustomField))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.ValueOption>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.DataTypeEnum))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.ValidateModelEnum))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TimecardApp.TimelogProjectManagementService.APIMessageSeverity))]
    public partial class ValueOption : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string LabelField;
        
        private int SortOrderField;
        
        private object ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SortOrder {
            get {
                return this.SortOrderField;
            }
            set {
                if ((this.SortOrderField.Equals(value) != true)) {
                    this.SortOrderField = value;
                    this.RaisePropertyChanged("SortOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataTypeEnum", Namespace="http://schemas.datacontract.org/2004/07/TimeLog.TLP.CustomFields")]
    public enum DataTypeEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        String = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Integer = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Float = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Date = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        List = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckBox = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidateModelEnum", Namespace="http://schemas.datacontract.org/2004/07/TimeLog.TLP.CustomFields")]
    public enum ValidateModelEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsNotEmptyOrWhiteSpace = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsPositiveNumber = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsNegativeNumber = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsEmail = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsNotNull = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="APIMessageSeverity", Namespace="http://schemas.datacontract.org/2004/07/TimeLog.TLP.API.Proxy.Communication.V1_0")]
    public enum APIMessageSeverity : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Invalid = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Message = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.timelog.com/api/tlp/v1_6", ConfigurationName="TimelogProjectManagementService.ProjectManagementService")]
    public interface ProjectManagementService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="IsAliveRequest", ReplyAction="IsAliveReponse")]
        System.IAsyncResult BeginIsAlive(TimecardApp.TimelogProjectManagementService.IsAliveRequest request, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.IsAliveResponse EndIsAlive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="GetProjectByExternalKeyRequest", ReplyAction="GetProjectByExternalKeyReponse")]
        System.IAsyncResult BeginGetProjectByExternalKey(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfProject EndGetProjectByExternalKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="CreateProjectRequest", ReplyAction="CreateProjectReponse")]
        System.IAsyncResult BeginCreateProject(TimecardApp.TimelogProjectManagementService.Project project, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.BatchResponseOfProject EndCreateProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="CreateProjectFromTemplateRequest", ReplyAction="CreateProjectFromTemplateReponse")]
        System.IAsyncResult BeginCreateProjectFromTemplate(
                    string projectTemplateName, 
                    string projectName, 
                    string projectNo, 
                    string customerName, 
                    System.Guid priceListID, 
                    System.Guid priceGroupID, 
                    string projectManagerInitials, 
                    string accountManagerInitials, 
                    string handledByDepartmentNo, 
                    string orderedByDepartmentNo, 
                    bool useProjectNumberSeries, 
                    bool useTasksAndMileStonesFromTemplate, 
                    bool useResourceGroupFromTemplate, 
                    bool useAllocationsFromTemplate, 
                    bool usePaymentPlanFromTemplate, 
                    int source, 
                    TimecardApp.TimelogProjectManagementService.SecurityToken token, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        TimecardApp.TimelogProjectManagementService.BatchResponseOfProject EndCreateProjectFromTemplate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="UpdateProjectRequest", ReplyAction="UpdateProjectReponse")]
        System.IAsyncResult BeginUpdateProject(TimecardApp.TimelogProjectManagementService.Project project, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.BatchResponseOfProject EndUpdateProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="DeleteProjectRequest", ReplyAction="DeleteProjectReponse")]
        System.IAsyncResult BeginDeleteProject(System.Guid projectGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfProject EndDeleteProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="ProjectChangeStatusRequest", ReplyAction="ProjectChangeStatusReponse")]
        System.IAsyncResult BeginProjectChangeStatus(System.Guid projectGUID, int targetStatus, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfProject EndProjectChangeStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="GetTaskByExternalKeyRequest", ReplyAction="GetTaskByExternalKeyReponse")]
        System.IAsyncResult BeginGetTaskByExternalKey(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfTask EndGetTaskByExternalKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="CreateTaskRequest", ReplyAction="CreateTaskReponse")]
        System.IAsyncResult BeginCreateTask(TimecardApp.TimelogProjectManagementService.Task task, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.BatchResponseOfTask EndCreateTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="UpdateTaskRequest", ReplyAction="UpdateTaskReponse")]
        System.IAsyncResult BeginUpdateTask(TimecardApp.TimelogProjectManagementService.Task task, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.BatchResponseOfTask EndUpdateTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="CreateSubTaskRequest", ReplyAction="CreateSubTaskReponse")]
        System.IAsyncResult BeginCreateSubTask(TimecardApp.TimelogProjectManagementService.Task task, int parentTaskId, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.BatchResponseOfTask EndCreateSubTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="DeleteTaskRequest", ReplyAction="DeleteTaskReponse")]
        System.IAsyncResult BeginDeleteTask(System.Guid TaskGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfTask EndDeleteTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="ChangeTaskStatusRequest", ReplyAction="ChangeTaskStatusReponse")]
        System.IAsyncResult BeginChangeTaskStatus(System.Guid taskGUID, int targetStatus, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfTask EndChangeTaskStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="GetAllocationByExternalKeyRequest", ReplyAction="GetAllocationByExternalKeyReponse")]
        System.IAsyncResult BeginGetAllocationByExternalKey(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndGetAllocationByExternalKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="AddEmployeeToTaskRequest", ReplyAction="AddEmployeeToTaskReponse")]
        System.IAsyncResult BeginAddEmployeeToTask(int employeeID, int taskID, double BudgetHours, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation EndAddEmployeeToTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="CreateAllocationRequest", ReplyAction="CreateAllocationReponse")]
        System.IAsyncResult BeginCreateAllocation(TimecardApp.TimelogProjectManagementService.Allocation allocation, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndCreateAllocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="CreateAllocationsRequest", ReplyAction="CreateAllocationsReponse")]
        System.IAsyncResult BeginCreateAllocations(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Allocation> allocations, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation EndCreateAllocations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="UpdateAllocationRequest", ReplyAction="UpdateAllocationReponse")]
        System.IAsyncResult BeginUpdateAllocation(TimecardApp.TimelogProjectManagementService.Allocation allocation, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndUpdateAllocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="SetAllocationStatusRequest", ReplyAction="SetAllocationStatusReponse")]
        System.IAsyncResult BeginSetAllocationStatus(bool IsComplete, System.Guid AllocationGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndSetAllocationStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="DeleteAllocationRequest", ReplyAction="DeleteAllocationReponse")]
        System.IAsyncResult BeginDeleteAllocation(System.Guid allocationGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndDeleteAllocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="GetTasksAllocatedToEmployeeRequest", ReplyAction="GetTasksAllocatedToEmployeeReponse")]
        System.IAsyncResult BeginGetTasksAllocatedToEmployee(string initials, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfTask EndGetTasksAllocatedToEmployee(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="GetTasksBySearchTextRequest", ReplyAction="GetTasksBySearchTextReponse")]
        System.IAsyncResult BeginGetTasksBySearchText(string critiria, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfTask EndGetTasksBySearchText(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="GetAllocationsToEmployeeRequest", ReplyAction="GetAllocationsToEmployeeReponse")]
        System.IAsyncResult BeginGetAllocationsToEmployee(string initials, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndGetAllocationsToEmployee(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="GetEmployeeWorkRequest", ReplyAction="GetEmployeeWorkReponse")]
        System.IAsyncResult BeginGetEmployeeWork(string initials, System.DateTime startDate, System.DateTime endDate, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnit EndGetEmployeeWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="InsertWorkRequest", ReplyAction="InsertWorkReponse")]
        System.IAsyncResult BeginInsertWork(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit EndInsertWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="UpdateWorkRequest", ReplyAction="UpdateWorkReponse")]
        System.IAsyncResult BeginUpdateWork(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit EndUpdateWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="DeleteWorkRequest", ReplyAction="DeleteWorkReponse")]
        System.IAsyncResult BeginDeleteWork(System.Collections.ObjectModel.ObservableCollection<System.Guid> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit EndDeleteWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="GetTaskByTaskNoRequest", ReplyAction="GetTaskByTaskNoTextReponse")]
        System.IAsyncResult BeginGetTaskByTaskNo(string taskNo, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfTask EndGetTaskByTaskNo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.timelog.com/api/tlp/v1_6/ProjectManagementService/GetWorkPaged", ReplyAction="http://www.timelog.com/api/tlp/v1_6/ProjectManagementService/GetWorkPagedResponse" +
            "")]
        System.IAsyncResult BeginGetWorkPaged(string initials, System.DateTime startDate, System.DateTime endDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat EndGetWorkPaged(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.timelog.com/api/tlp/v1_6/ProjectManagementService/GetWorkPagedWithExte" +
            "rnalIds", ReplyAction="http://www.timelog.com/api/tlp/v1_6/ProjectManagementService/GetWorkPagedWithExte" +
            "rnalIdsResponse")]
        System.IAsyncResult BeginGetWorkPagedWithExternalIds(string systemName, int approvalLevel, string initials, System.DateTime startDate, System.DateTime endDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlatExternal EndGetWorkPagedWithExternalIds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.timelog.com/api/tlp/v1_6/ProjectManagementService/GetWorkChangesPaged", ReplyAction="http://www.timelog.com/api/tlp/v1_6/ProjectManagementService/GetWorkChangesPagedR" +
            "esponse")]
        System.IAsyncResult BeginGetWorkChangesPaged(string initials, System.DateTime registrationStartDate, System.DateTime registrationEndDate, System.DateTime changeStartDate, System.DateTime changeEndDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat EndGetWorkChangesPaged(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.timelog.com/api/tlp/v1_6/ProjectManagementService/GetProjectTasksPaged" +
            "", ReplyAction="http://www.timelog.com/api/tlp/v1_6/ProjectManagementService/GetProjectTasksPaged" +
            "Response")]
        System.IAsyncResult BeginGetProjectTasksPaged(System.Guid projectGuid, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfProjectTaskFlat EndGetProjectTasksPaged(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.timelog.com/api/tlp/v1_6/ProjectManagementService/GetWorkChangeLogPage" +
            "d", ReplyAction="http://www.timelog.com/api/tlp/v1_6/ProjectManagementService/GetWorkChangeLogPage" +
            "dResponse")]
        System.IAsyncResult BeginGetWorkChangeLogPaged(System.DateTime startDate, System.DateTime endDate, bool includeCreates, bool includeUpdates, bool includeDeletes, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState);
        
        TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat EndGetWorkChangeLogPaged(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsAlive", WrapperNamespace="http://www.timelog.com/api/tlp/v1_3", IsWrapped=true)]
    public partial class IsAliveRequest {
        
        public IsAliveRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsAliveResponse", WrapperNamespace="http://www.timelog.com/api/tlp/v1_3", IsWrapped=true)]
    public partial class IsAliveResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.timelog.com/api/tlp/v1_3", Order=0)]
        public bool IsAliveResult;
        
        public IsAliveResponse() {
        }
        
        public IsAliveResponse(bool IsAliveResult) {
            this.IsAliveResult = IsAliveResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ProjectManagementServiceChannel : TimecardApp.TimelogProjectManagementService.ProjectManagementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProjectByExternalKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProjectByExternalKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfProject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfProject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.BatchResponseOfProject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.BatchResponseOfProject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateProjectFromTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateProjectFromTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.BatchResponseOfProject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.BatchResponseOfProject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.BatchResponseOfProject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.BatchResponseOfProject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfProject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfProject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectChangeStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProjectChangeStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfProject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfProject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTaskByExternalKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTaskByExternalKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.BatchResponseOfTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.BatchResponseOfTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.BatchResponseOfTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.BatchResponseOfTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateSubTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateSubTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.BatchResponseOfTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.BatchResponseOfTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeTaskStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeTaskStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllocationByExternalKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllocationByExternalKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddEmployeeToTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddEmployeeToTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateAllocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateAllocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateAllocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateAllocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateAllocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateAllocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetAllocationStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetAllocationStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteAllocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteAllocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTasksAllocatedToEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTasksAllocatedToEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTasksBySearchTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTasksBySearchTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllocationsToEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllocationsToEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEmployeeWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEmployeeWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnit Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnit)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTaskByTaskNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTaskByTaskNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkPagedWithExternalIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkPagedWithExternalIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlatExternal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlatExternal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkChangesPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkChangesPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProjectTasksPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProjectTasksPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfProjectTaskFlat Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfProjectTaskFlat)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkChangeLogPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkChangeLogPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectManagementServiceClient : System.ServiceModel.ClientBase<TimecardApp.TimelogProjectManagementService.ProjectManagementService>, TimecardApp.TimelogProjectManagementService.ProjectManagementService {
        
        private BeginOperationDelegate onBeginIsAliveDelegate;
        
        private EndOperationDelegate onEndIsAliveDelegate;
        
        private System.Threading.SendOrPostCallback onIsAliveCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProjectByExternalKeyDelegate;
        
        private EndOperationDelegate onEndGetProjectByExternalKeyDelegate;
        
        private System.Threading.SendOrPostCallback onGetProjectByExternalKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateProjectDelegate;
        
        private EndOperationDelegate onEndCreateProjectDelegate;
        
        private System.Threading.SendOrPostCallback onCreateProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateProjectFromTemplateDelegate;
        
        private EndOperationDelegate onEndCreateProjectFromTemplateDelegate;
        
        private System.Threading.SendOrPostCallback onCreateProjectFromTemplateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateProjectDelegate;
        
        private EndOperationDelegate onEndUpdateProjectDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteProjectDelegate;
        
        private EndOperationDelegate onEndDeleteProjectDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginProjectChangeStatusDelegate;
        
        private EndOperationDelegate onEndProjectChangeStatusDelegate;
        
        private System.Threading.SendOrPostCallback onProjectChangeStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTaskByExternalKeyDelegate;
        
        private EndOperationDelegate onEndGetTaskByExternalKeyDelegate;
        
        private System.Threading.SendOrPostCallback onGetTaskByExternalKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateTaskDelegate;
        
        private EndOperationDelegate onEndCreateTaskDelegate;
        
        private System.Threading.SendOrPostCallback onCreateTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTaskDelegate;
        
        private EndOperationDelegate onEndUpdateTaskDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateSubTaskDelegate;
        
        private EndOperationDelegate onEndCreateSubTaskDelegate;
        
        private System.Threading.SendOrPostCallback onCreateSubTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTaskDelegate;
        
        private EndOperationDelegate onEndDeleteTaskDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeTaskStatusDelegate;
        
        private EndOperationDelegate onEndChangeTaskStatusDelegate;
        
        private System.Threading.SendOrPostCallback onChangeTaskStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllocationByExternalKeyDelegate;
        
        private EndOperationDelegate onEndGetAllocationByExternalKeyDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllocationByExternalKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddEmployeeToTaskDelegate;
        
        private EndOperationDelegate onEndAddEmployeeToTaskDelegate;
        
        private System.Threading.SendOrPostCallback onAddEmployeeToTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateAllocationDelegate;
        
        private EndOperationDelegate onEndCreateAllocationDelegate;
        
        private System.Threading.SendOrPostCallback onCreateAllocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateAllocationsDelegate;
        
        private EndOperationDelegate onEndCreateAllocationsDelegate;
        
        private System.Threading.SendOrPostCallback onCreateAllocationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAllocationDelegate;
        
        private EndOperationDelegate onEndUpdateAllocationDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAllocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetAllocationStatusDelegate;
        
        private EndOperationDelegate onEndSetAllocationStatusDelegate;
        
        private System.Threading.SendOrPostCallback onSetAllocationStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAllocationDelegate;
        
        private EndOperationDelegate onEndDeleteAllocationDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAllocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTasksAllocatedToEmployeeDelegate;
        
        private EndOperationDelegate onEndGetTasksAllocatedToEmployeeDelegate;
        
        private System.Threading.SendOrPostCallback onGetTasksAllocatedToEmployeeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTasksBySearchTextDelegate;
        
        private EndOperationDelegate onEndGetTasksBySearchTextDelegate;
        
        private System.Threading.SendOrPostCallback onGetTasksBySearchTextCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllocationsToEmployeeDelegate;
        
        private EndOperationDelegate onEndGetAllocationsToEmployeeDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllocationsToEmployeeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEmployeeWorkDelegate;
        
        private EndOperationDelegate onEndGetEmployeeWorkDelegate;
        
        private System.Threading.SendOrPostCallback onGetEmployeeWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertWorkDelegate;
        
        private EndOperationDelegate onEndInsertWorkDelegate;
        
        private System.Threading.SendOrPostCallback onInsertWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateWorkDelegate;
        
        private EndOperationDelegate onEndUpdateWorkDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteWorkDelegate;
        
        private EndOperationDelegate onEndDeleteWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTaskByTaskNoDelegate;
        
        private EndOperationDelegate onEndGetTaskByTaskNoDelegate;
        
        private System.Threading.SendOrPostCallback onGetTaskByTaskNoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkPagedDelegate;
        
        private EndOperationDelegate onEndGetWorkPagedDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkPagedCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkPagedWithExternalIdsDelegate;
        
        private EndOperationDelegate onEndGetWorkPagedWithExternalIdsDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkPagedWithExternalIdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkChangesPagedDelegate;
        
        private EndOperationDelegate onEndGetWorkChangesPagedDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkChangesPagedCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProjectTasksPagedDelegate;
        
        private EndOperationDelegate onEndGetProjectTasksPagedDelegate;
        
        private System.Threading.SendOrPostCallback onGetProjectTasksPagedCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkChangeLogPagedDelegate;
        
        private EndOperationDelegate onEndGetWorkChangeLogPagedDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkChangeLogPagedCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ProjectManagementServiceClient() {
        }
        
        public ProjectManagementServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectManagementServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectManagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<IsAliveCompletedEventArgs> IsAliveCompleted;
        
        public event System.EventHandler<GetProjectByExternalKeyCompletedEventArgs> GetProjectByExternalKeyCompleted;
        
        public event System.EventHandler<CreateProjectCompletedEventArgs> CreateProjectCompleted;
        
        public event System.EventHandler<CreateProjectFromTemplateCompletedEventArgs> CreateProjectFromTemplateCompleted;
        
        public event System.EventHandler<UpdateProjectCompletedEventArgs> UpdateProjectCompleted;
        
        public event System.EventHandler<DeleteProjectCompletedEventArgs> DeleteProjectCompleted;
        
        public event System.EventHandler<ProjectChangeStatusCompletedEventArgs> ProjectChangeStatusCompleted;
        
        public event System.EventHandler<GetTaskByExternalKeyCompletedEventArgs> GetTaskByExternalKeyCompleted;
        
        public event System.EventHandler<CreateTaskCompletedEventArgs> CreateTaskCompleted;
        
        public event System.EventHandler<UpdateTaskCompletedEventArgs> UpdateTaskCompleted;
        
        public event System.EventHandler<CreateSubTaskCompletedEventArgs> CreateSubTaskCompleted;
        
        public event System.EventHandler<DeleteTaskCompletedEventArgs> DeleteTaskCompleted;
        
        public event System.EventHandler<ChangeTaskStatusCompletedEventArgs> ChangeTaskStatusCompleted;
        
        public event System.EventHandler<GetAllocationByExternalKeyCompletedEventArgs> GetAllocationByExternalKeyCompleted;
        
        public event System.EventHandler<AddEmployeeToTaskCompletedEventArgs> AddEmployeeToTaskCompleted;
        
        public event System.EventHandler<CreateAllocationCompletedEventArgs> CreateAllocationCompleted;
        
        public event System.EventHandler<CreateAllocationsCompletedEventArgs> CreateAllocationsCompleted;
        
        public event System.EventHandler<UpdateAllocationCompletedEventArgs> UpdateAllocationCompleted;
        
        public event System.EventHandler<SetAllocationStatusCompletedEventArgs> SetAllocationStatusCompleted;
        
        public event System.EventHandler<DeleteAllocationCompletedEventArgs> DeleteAllocationCompleted;
        
        public event System.EventHandler<GetTasksAllocatedToEmployeeCompletedEventArgs> GetTasksAllocatedToEmployeeCompleted;
        
        public event System.EventHandler<GetTasksBySearchTextCompletedEventArgs> GetTasksBySearchTextCompleted;
        
        public event System.EventHandler<GetAllocationsToEmployeeCompletedEventArgs> GetAllocationsToEmployeeCompleted;
        
        public event System.EventHandler<GetEmployeeWorkCompletedEventArgs> GetEmployeeWorkCompleted;
        
        public event System.EventHandler<InsertWorkCompletedEventArgs> InsertWorkCompleted;
        
        public event System.EventHandler<UpdateWorkCompletedEventArgs> UpdateWorkCompleted;
        
        public event System.EventHandler<DeleteWorkCompletedEventArgs> DeleteWorkCompleted;
        
        public event System.EventHandler<GetTaskByTaskNoCompletedEventArgs> GetTaskByTaskNoCompleted;
        
        public event System.EventHandler<GetWorkPagedCompletedEventArgs> GetWorkPagedCompleted;
        
        public event System.EventHandler<GetWorkPagedWithExternalIdsCompletedEventArgs> GetWorkPagedWithExternalIdsCompleted;
        
        public event System.EventHandler<GetWorkChangesPagedCompletedEventArgs> GetWorkChangesPagedCompleted;
        
        public event System.EventHandler<GetProjectTasksPagedCompletedEventArgs> GetProjectTasksPagedCompleted;
        
        public event System.EventHandler<GetWorkChangeLogPagedCompletedEventArgs> GetWorkChangeLogPagedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginIsAlive(TimecardApp.TimelogProjectManagementService.IsAliveRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsAlive(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginIsAlive(System.AsyncCallback callback, object asyncState) {
            TimecardApp.TimelogProjectManagementService.IsAliveRequest inValue = new TimecardApp.TimelogProjectManagementService.IsAliveRequest();
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginIsAlive(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.IsAliveResponse TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndIsAlive(System.IAsyncResult result) {
            return base.Channel.EndIsAlive(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private bool EndIsAlive(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.IsAliveResponse retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndIsAlive(result);
            return retVal.IsAliveResult;
        }
        
        private System.IAsyncResult OnBeginIsAlive(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIsAlive(callback, asyncState);
        }
        
        private object[] OnEndIsAlive(System.IAsyncResult result) {
            bool retVal = this.EndIsAlive(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsAliveCompleted(object state) {
            if ((this.IsAliveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        public void IsAliveAsync(object userState) {
            if ((this.onBeginIsAliveDelegate == null)) {
                this.onBeginIsAliveDelegate = new BeginOperationDelegate(this.OnBeginIsAlive);
            }
            if ((this.onEndIsAliveDelegate == null)) {
                this.onEndIsAliveDelegate = new EndOperationDelegate(this.OnEndIsAlive);
            }
            if ((this.onIsAliveCompletedDelegate == null)) {
                this.onIsAliveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsAliveCompleted);
            }
            base.InvokeAsync(this.onBeginIsAliveDelegate, null, this.onEndIsAliveDelegate, this.onIsAliveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetProjectByExternalKey(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProjectByExternalKey(key, systemName, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfProject TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetProjectByExternalKey(System.IAsyncResult result) {
            return base.Channel.EndGetProjectByExternalKey(result);
        }
        
        private System.IAsyncResult OnBeginGetProjectByExternalKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string systemName = ((string)(inValues[1]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[2]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetProjectByExternalKey(key, systemName, token, callback, asyncState);
        }
        
        private object[] OnEndGetProjectByExternalKey(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfProject retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetProjectByExternalKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProjectByExternalKeyCompleted(object state) {
            if ((this.GetProjectByExternalKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProjectByExternalKeyCompleted(this, new GetProjectByExternalKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProjectByExternalKeyAsync(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetProjectByExternalKeyAsync(key, systemName, token, null);
        }
        
        public void GetProjectByExternalKeyAsync(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetProjectByExternalKeyDelegate == null)) {
                this.onBeginGetProjectByExternalKeyDelegate = new BeginOperationDelegate(this.OnBeginGetProjectByExternalKey);
            }
            if ((this.onEndGetProjectByExternalKeyDelegate == null)) {
                this.onEndGetProjectByExternalKeyDelegate = new EndOperationDelegate(this.OnEndGetProjectByExternalKey);
            }
            if ((this.onGetProjectByExternalKeyCompletedDelegate == null)) {
                this.onGetProjectByExternalKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProjectByExternalKeyCompleted);
            }
            base.InvokeAsync(this.onBeginGetProjectByExternalKeyDelegate, new object[] {
                        key,
                        systemName,
                        token}, this.onEndGetProjectByExternalKeyDelegate, this.onGetProjectByExternalKeyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginCreateProject(TimecardApp.TimelogProjectManagementService.Project project, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateProject(project, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.BatchResponseOfProject TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndCreateProject(System.IAsyncResult result) {
            return base.Channel.EndCreateProject(result);
        }
        
        private System.IAsyncResult OnBeginCreateProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TimecardApp.TimelogProjectManagementService.Project project = ((TimecardApp.TimelogProjectManagementService.Project)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginCreateProject(project, token, callback, asyncState);
        }
        
        private object[] OnEndCreateProject(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.BatchResponseOfProject retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndCreateProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateProjectCompleted(object state) {
            if ((this.CreateProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateProjectCompleted(this, new CreateProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateProjectAsync(TimecardApp.TimelogProjectManagementService.Project project, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.CreateProjectAsync(project, token, null);
        }
        
        public void CreateProjectAsync(TimecardApp.TimelogProjectManagementService.Project project, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginCreateProjectDelegate == null)) {
                this.onBeginCreateProjectDelegate = new BeginOperationDelegate(this.OnBeginCreateProject);
            }
            if ((this.onEndCreateProjectDelegate == null)) {
                this.onEndCreateProjectDelegate = new EndOperationDelegate(this.OnEndCreateProject);
            }
            if ((this.onCreateProjectCompletedDelegate == null)) {
                this.onCreateProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateProjectCompleted);
            }
            base.InvokeAsync(this.onBeginCreateProjectDelegate, new object[] {
                        project,
                        token}, this.onEndCreateProjectDelegate, this.onCreateProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginCreateProjectFromTemplate(
                    string projectTemplateName, 
                    string projectName, 
                    string projectNo, 
                    string customerName, 
                    System.Guid priceListID, 
                    System.Guid priceGroupID, 
                    string projectManagerInitials, 
                    string accountManagerInitials, 
                    string handledByDepartmentNo, 
                    string orderedByDepartmentNo, 
                    bool useProjectNumberSeries, 
                    bool useTasksAndMileStonesFromTemplate, 
                    bool useResourceGroupFromTemplate, 
                    bool useAllocationsFromTemplate, 
                    bool usePaymentPlanFromTemplate, 
                    int source, 
                    TimecardApp.TimelogProjectManagementService.SecurityToken token, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginCreateProjectFromTemplate(projectTemplateName, projectName, projectNo, customerName, priceListID, priceGroupID, projectManagerInitials, accountManagerInitials, handledByDepartmentNo, orderedByDepartmentNo, useProjectNumberSeries, useTasksAndMileStonesFromTemplate, useResourceGroupFromTemplate, useAllocationsFromTemplate, usePaymentPlanFromTemplate, source, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.BatchResponseOfProject TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndCreateProjectFromTemplate(System.IAsyncResult result) {
            return base.Channel.EndCreateProjectFromTemplate(result);
        }
        
        private System.IAsyncResult OnBeginCreateProjectFromTemplate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string projectTemplateName = ((string)(inValues[0]));
            string projectName = ((string)(inValues[1]));
            string projectNo = ((string)(inValues[2]));
            string customerName = ((string)(inValues[3]));
            System.Guid priceListID = ((System.Guid)(inValues[4]));
            System.Guid priceGroupID = ((System.Guid)(inValues[5]));
            string projectManagerInitials = ((string)(inValues[6]));
            string accountManagerInitials = ((string)(inValues[7]));
            string handledByDepartmentNo = ((string)(inValues[8]));
            string orderedByDepartmentNo = ((string)(inValues[9]));
            bool useProjectNumberSeries = ((bool)(inValues[10]));
            bool useTasksAndMileStonesFromTemplate = ((bool)(inValues[11]));
            bool useResourceGroupFromTemplate = ((bool)(inValues[12]));
            bool useAllocationsFromTemplate = ((bool)(inValues[13]));
            bool usePaymentPlanFromTemplate = ((bool)(inValues[14]));
            int source = ((int)(inValues[15]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[16]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginCreateProjectFromTemplate(projectTemplateName, projectName, projectNo, customerName, priceListID, priceGroupID, projectManagerInitials, accountManagerInitials, handledByDepartmentNo, orderedByDepartmentNo, useProjectNumberSeries, useTasksAndMileStonesFromTemplate, useResourceGroupFromTemplate, useAllocationsFromTemplate, usePaymentPlanFromTemplate, source, token, callback, asyncState);
        }
        
        private object[] OnEndCreateProjectFromTemplate(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.BatchResponseOfProject retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndCreateProjectFromTemplate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateProjectFromTemplateCompleted(object state) {
            if ((this.CreateProjectFromTemplateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateProjectFromTemplateCompleted(this, new CreateProjectFromTemplateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateProjectFromTemplateAsync(
                    string projectTemplateName, 
                    string projectName, 
                    string projectNo, 
                    string customerName, 
                    System.Guid priceListID, 
                    System.Guid priceGroupID, 
                    string projectManagerInitials, 
                    string accountManagerInitials, 
                    string handledByDepartmentNo, 
                    string orderedByDepartmentNo, 
                    bool useProjectNumberSeries, 
                    bool useTasksAndMileStonesFromTemplate, 
                    bool useResourceGroupFromTemplate, 
                    bool useAllocationsFromTemplate, 
                    bool usePaymentPlanFromTemplate, 
                    int source, 
                    TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.CreateProjectFromTemplateAsync(projectTemplateName, projectName, projectNo, customerName, priceListID, priceGroupID, projectManagerInitials, accountManagerInitials, handledByDepartmentNo, orderedByDepartmentNo, useProjectNumberSeries, useTasksAndMileStonesFromTemplate, useResourceGroupFromTemplate, useAllocationsFromTemplate, usePaymentPlanFromTemplate, source, token, null);
        }
        
        public void CreateProjectFromTemplateAsync(
                    string projectTemplateName, 
                    string projectName, 
                    string projectNo, 
                    string customerName, 
                    System.Guid priceListID, 
                    System.Guid priceGroupID, 
                    string projectManagerInitials, 
                    string accountManagerInitials, 
                    string handledByDepartmentNo, 
                    string orderedByDepartmentNo, 
                    bool useProjectNumberSeries, 
                    bool useTasksAndMileStonesFromTemplate, 
                    bool useResourceGroupFromTemplate, 
                    bool useAllocationsFromTemplate, 
                    bool usePaymentPlanFromTemplate, 
                    int source, 
                    TimecardApp.TimelogProjectManagementService.SecurityToken token, 
                    object userState) {
            if ((this.onBeginCreateProjectFromTemplateDelegate == null)) {
                this.onBeginCreateProjectFromTemplateDelegate = new BeginOperationDelegate(this.OnBeginCreateProjectFromTemplate);
            }
            if ((this.onEndCreateProjectFromTemplateDelegate == null)) {
                this.onEndCreateProjectFromTemplateDelegate = new EndOperationDelegate(this.OnEndCreateProjectFromTemplate);
            }
            if ((this.onCreateProjectFromTemplateCompletedDelegate == null)) {
                this.onCreateProjectFromTemplateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateProjectFromTemplateCompleted);
            }
            base.InvokeAsync(this.onBeginCreateProjectFromTemplateDelegate, new object[] {
                        projectTemplateName,
                        projectName,
                        projectNo,
                        customerName,
                        priceListID,
                        priceGroupID,
                        projectManagerInitials,
                        accountManagerInitials,
                        handledByDepartmentNo,
                        orderedByDepartmentNo,
                        useProjectNumberSeries,
                        useTasksAndMileStonesFromTemplate,
                        useResourceGroupFromTemplate,
                        useAllocationsFromTemplate,
                        usePaymentPlanFromTemplate,
                        source,
                        token}, this.onEndCreateProjectFromTemplateDelegate, this.onCreateProjectFromTemplateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginUpdateProject(TimecardApp.TimelogProjectManagementService.Project project, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateProject(project, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.BatchResponseOfProject TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndUpdateProject(System.IAsyncResult result) {
            return base.Channel.EndUpdateProject(result);
        }
        
        private System.IAsyncResult OnBeginUpdateProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TimecardApp.TimelogProjectManagementService.Project project = ((TimecardApp.TimelogProjectManagementService.Project)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginUpdateProject(project, token, callback, asyncState);
        }
        
        private object[] OnEndUpdateProject(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.BatchResponseOfProject retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndUpdateProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateProjectCompleted(object state) {
            if ((this.UpdateProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateProjectCompleted(this, new UpdateProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateProjectAsync(TimecardApp.TimelogProjectManagementService.Project project, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.UpdateProjectAsync(project, token, null);
        }
        
        public void UpdateProjectAsync(TimecardApp.TimelogProjectManagementService.Project project, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginUpdateProjectDelegate == null)) {
                this.onBeginUpdateProjectDelegate = new BeginOperationDelegate(this.OnBeginUpdateProject);
            }
            if ((this.onEndUpdateProjectDelegate == null)) {
                this.onEndUpdateProjectDelegate = new EndOperationDelegate(this.OnEndUpdateProject);
            }
            if ((this.onUpdateProjectCompletedDelegate == null)) {
                this.onUpdateProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateProjectCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateProjectDelegate, new object[] {
                        project,
                        token}, this.onEndUpdateProjectDelegate, this.onUpdateProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginDeleteProject(System.Guid projectGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteProject(projectGUID, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfProject TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndDeleteProject(System.IAsyncResult result) {
            return base.Channel.EndDeleteProject(result);
        }
        
        private System.IAsyncResult OnBeginDeleteProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid projectGUID = ((System.Guid)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginDeleteProject(projectGUID, token, callback, asyncState);
        }
        
        private object[] OnEndDeleteProject(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfProject retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndDeleteProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteProjectCompleted(object state) {
            if ((this.DeleteProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteProjectCompleted(this, new DeleteProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteProjectAsync(System.Guid projectGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.DeleteProjectAsync(projectGUID, token, null);
        }
        
        public void DeleteProjectAsync(System.Guid projectGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginDeleteProjectDelegate == null)) {
                this.onBeginDeleteProjectDelegate = new BeginOperationDelegate(this.OnBeginDeleteProject);
            }
            if ((this.onEndDeleteProjectDelegate == null)) {
                this.onEndDeleteProjectDelegate = new EndOperationDelegate(this.OnEndDeleteProject);
            }
            if ((this.onDeleteProjectCompletedDelegate == null)) {
                this.onDeleteProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteProjectCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteProjectDelegate, new object[] {
                        projectGUID,
                        token}, this.onEndDeleteProjectDelegate, this.onDeleteProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginProjectChangeStatus(System.Guid projectGUID, int targetStatus, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProjectChangeStatus(projectGUID, targetStatus, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfProject TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndProjectChangeStatus(System.IAsyncResult result) {
            return base.Channel.EndProjectChangeStatus(result);
        }
        
        private System.IAsyncResult OnBeginProjectChangeStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid projectGUID = ((System.Guid)(inValues[0]));
            int targetStatus = ((int)(inValues[1]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[2]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginProjectChangeStatus(projectGUID, targetStatus, token, callback, asyncState);
        }
        
        private object[] OnEndProjectChangeStatus(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfProject retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndProjectChangeStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProjectChangeStatusCompleted(object state) {
            if ((this.ProjectChangeStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProjectChangeStatusCompleted(this, new ProjectChangeStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProjectChangeStatusAsync(System.Guid projectGUID, int targetStatus, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.ProjectChangeStatusAsync(projectGUID, targetStatus, token, null);
        }
        
        public void ProjectChangeStatusAsync(System.Guid projectGUID, int targetStatus, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginProjectChangeStatusDelegate == null)) {
                this.onBeginProjectChangeStatusDelegate = new BeginOperationDelegate(this.OnBeginProjectChangeStatus);
            }
            if ((this.onEndProjectChangeStatusDelegate == null)) {
                this.onEndProjectChangeStatusDelegate = new EndOperationDelegate(this.OnEndProjectChangeStatus);
            }
            if ((this.onProjectChangeStatusCompletedDelegate == null)) {
                this.onProjectChangeStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProjectChangeStatusCompleted);
            }
            base.InvokeAsync(this.onBeginProjectChangeStatusDelegate, new object[] {
                        projectGUID,
                        targetStatus,
                        token}, this.onEndProjectChangeStatusDelegate, this.onProjectChangeStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetTaskByExternalKey(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTaskByExternalKey(key, systemName, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfTask TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetTaskByExternalKey(System.IAsyncResult result) {
            return base.Channel.EndGetTaskByExternalKey(result);
        }
        
        private System.IAsyncResult OnBeginGetTaskByExternalKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string systemName = ((string)(inValues[1]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[2]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetTaskByExternalKey(key, systemName, token, callback, asyncState);
        }
        
        private object[] OnEndGetTaskByExternalKey(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfTask retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetTaskByExternalKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTaskByExternalKeyCompleted(object state) {
            if ((this.GetTaskByExternalKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTaskByExternalKeyCompleted(this, new GetTaskByExternalKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTaskByExternalKeyAsync(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetTaskByExternalKeyAsync(key, systemName, token, null);
        }
        
        public void GetTaskByExternalKeyAsync(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetTaskByExternalKeyDelegate == null)) {
                this.onBeginGetTaskByExternalKeyDelegate = new BeginOperationDelegate(this.OnBeginGetTaskByExternalKey);
            }
            if ((this.onEndGetTaskByExternalKeyDelegate == null)) {
                this.onEndGetTaskByExternalKeyDelegate = new EndOperationDelegate(this.OnEndGetTaskByExternalKey);
            }
            if ((this.onGetTaskByExternalKeyCompletedDelegate == null)) {
                this.onGetTaskByExternalKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTaskByExternalKeyCompleted);
            }
            base.InvokeAsync(this.onBeginGetTaskByExternalKeyDelegate, new object[] {
                        key,
                        systemName,
                        token}, this.onEndGetTaskByExternalKeyDelegate, this.onGetTaskByExternalKeyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginCreateTask(TimecardApp.TimelogProjectManagementService.Task task, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateTask(task, projectID, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.BatchResponseOfTask TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndCreateTask(System.IAsyncResult result) {
            return base.Channel.EndCreateTask(result);
        }
        
        private System.IAsyncResult OnBeginCreateTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TimecardApp.TimelogProjectManagementService.Task task = ((TimecardApp.TimelogProjectManagementService.Task)(inValues[0]));
            int projectID = ((int)(inValues[1]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[2]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginCreateTask(task, projectID, token, callback, asyncState);
        }
        
        private object[] OnEndCreateTask(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.BatchResponseOfTask retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndCreateTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateTaskCompleted(object state) {
            if ((this.CreateTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateTaskCompleted(this, new CreateTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateTaskAsync(TimecardApp.TimelogProjectManagementService.Task task, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.CreateTaskAsync(task, projectID, token, null);
        }
        
        public void CreateTaskAsync(TimecardApp.TimelogProjectManagementService.Task task, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginCreateTaskDelegate == null)) {
                this.onBeginCreateTaskDelegate = new BeginOperationDelegate(this.OnBeginCreateTask);
            }
            if ((this.onEndCreateTaskDelegate == null)) {
                this.onEndCreateTaskDelegate = new EndOperationDelegate(this.OnEndCreateTask);
            }
            if ((this.onCreateTaskCompletedDelegate == null)) {
                this.onCreateTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateTaskCompleted);
            }
            base.InvokeAsync(this.onBeginCreateTaskDelegate, new object[] {
                        task,
                        projectID,
                        token}, this.onEndCreateTaskDelegate, this.onCreateTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginUpdateTask(TimecardApp.TimelogProjectManagementService.Task task, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTask(task, projectID, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.BatchResponseOfTask TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndUpdateTask(System.IAsyncResult result) {
            return base.Channel.EndUpdateTask(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TimecardApp.TimelogProjectManagementService.Task task = ((TimecardApp.TimelogProjectManagementService.Task)(inValues[0]));
            int projectID = ((int)(inValues[1]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[2]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginUpdateTask(task, projectID, token, callback, asyncState);
        }
        
        private object[] OnEndUpdateTask(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.BatchResponseOfTask retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndUpdateTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateTaskCompleted(object state) {
            if ((this.UpdateTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTaskCompleted(this, new UpdateTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTaskAsync(TimecardApp.TimelogProjectManagementService.Task task, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.UpdateTaskAsync(task, projectID, token, null);
        }
        
        public void UpdateTaskAsync(TimecardApp.TimelogProjectManagementService.Task task, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginUpdateTaskDelegate == null)) {
                this.onBeginUpdateTaskDelegate = new BeginOperationDelegate(this.OnBeginUpdateTask);
            }
            if ((this.onEndUpdateTaskDelegate == null)) {
                this.onEndUpdateTaskDelegate = new EndOperationDelegate(this.OnEndUpdateTask);
            }
            if ((this.onUpdateTaskCompletedDelegate == null)) {
                this.onUpdateTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTaskCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTaskDelegate, new object[] {
                        task,
                        projectID,
                        token}, this.onEndUpdateTaskDelegate, this.onUpdateTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginCreateSubTask(TimecardApp.TimelogProjectManagementService.Task task, int parentTaskId, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateSubTask(task, parentTaskId, projectID, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.BatchResponseOfTask TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndCreateSubTask(System.IAsyncResult result) {
            return base.Channel.EndCreateSubTask(result);
        }
        
        private System.IAsyncResult OnBeginCreateSubTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TimecardApp.TimelogProjectManagementService.Task task = ((TimecardApp.TimelogProjectManagementService.Task)(inValues[0]));
            int parentTaskId = ((int)(inValues[1]));
            int projectID = ((int)(inValues[2]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[3]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginCreateSubTask(task, parentTaskId, projectID, token, callback, asyncState);
        }
        
        private object[] OnEndCreateSubTask(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.BatchResponseOfTask retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndCreateSubTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateSubTaskCompleted(object state) {
            if ((this.CreateSubTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateSubTaskCompleted(this, new CreateSubTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateSubTaskAsync(TimecardApp.TimelogProjectManagementService.Task task, int parentTaskId, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.CreateSubTaskAsync(task, parentTaskId, projectID, token, null);
        }
        
        public void CreateSubTaskAsync(TimecardApp.TimelogProjectManagementService.Task task, int parentTaskId, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginCreateSubTaskDelegate == null)) {
                this.onBeginCreateSubTaskDelegate = new BeginOperationDelegate(this.OnBeginCreateSubTask);
            }
            if ((this.onEndCreateSubTaskDelegate == null)) {
                this.onEndCreateSubTaskDelegate = new EndOperationDelegate(this.OnEndCreateSubTask);
            }
            if ((this.onCreateSubTaskCompletedDelegate == null)) {
                this.onCreateSubTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateSubTaskCompleted);
            }
            base.InvokeAsync(this.onBeginCreateSubTaskDelegate, new object[] {
                        task,
                        parentTaskId,
                        projectID,
                        token}, this.onEndCreateSubTaskDelegate, this.onCreateSubTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginDeleteTask(System.Guid TaskGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTask(TaskGUID, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfTask TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndDeleteTask(System.IAsyncResult result) {
            return base.Channel.EndDeleteTask(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid TaskGUID = ((System.Guid)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginDeleteTask(TaskGUID, token, callback, asyncState);
        }
        
        private object[] OnEndDeleteTask(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfTask retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndDeleteTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteTaskCompleted(object state) {
            if ((this.DeleteTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTaskCompleted(this, new DeleteTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTaskAsync(System.Guid TaskGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.DeleteTaskAsync(TaskGUID, token, null);
        }
        
        public void DeleteTaskAsync(System.Guid TaskGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginDeleteTaskDelegate == null)) {
                this.onBeginDeleteTaskDelegate = new BeginOperationDelegate(this.OnBeginDeleteTask);
            }
            if ((this.onEndDeleteTaskDelegate == null)) {
                this.onEndDeleteTaskDelegate = new EndOperationDelegate(this.OnEndDeleteTask);
            }
            if ((this.onDeleteTaskCompletedDelegate == null)) {
                this.onDeleteTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTaskCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTaskDelegate, new object[] {
                        TaskGUID,
                        token}, this.onEndDeleteTaskDelegate, this.onDeleteTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginChangeTaskStatus(System.Guid taskGUID, int targetStatus, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeTaskStatus(taskGUID, targetStatus, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfTask TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndChangeTaskStatus(System.IAsyncResult result) {
            return base.Channel.EndChangeTaskStatus(result);
        }
        
        private System.IAsyncResult OnBeginChangeTaskStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid taskGUID = ((System.Guid)(inValues[0]));
            int targetStatus = ((int)(inValues[1]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[2]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginChangeTaskStatus(taskGUID, targetStatus, token, callback, asyncState);
        }
        
        private object[] OnEndChangeTaskStatus(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfTask retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndChangeTaskStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeTaskStatusCompleted(object state) {
            if ((this.ChangeTaskStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeTaskStatusCompleted(this, new ChangeTaskStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeTaskStatusAsync(System.Guid taskGUID, int targetStatus, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.ChangeTaskStatusAsync(taskGUID, targetStatus, token, null);
        }
        
        public void ChangeTaskStatusAsync(System.Guid taskGUID, int targetStatus, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginChangeTaskStatusDelegate == null)) {
                this.onBeginChangeTaskStatusDelegate = new BeginOperationDelegate(this.OnBeginChangeTaskStatus);
            }
            if ((this.onEndChangeTaskStatusDelegate == null)) {
                this.onEndChangeTaskStatusDelegate = new EndOperationDelegate(this.OnEndChangeTaskStatus);
            }
            if ((this.onChangeTaskStatusCompletedDelegate == null)) {
                this.onChangeTaskStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeTaskStatusCompleted);
            }
            base.InvokeAsync(this.onBeginChangeTaskStatusDelegate, new object[] {
                        taskGUID,
                        targetStatus,
                        token}, this.onEndChangeTaskStatusDelegate, this.onChangeTaskStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetAllocationByExternalKey(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllocationByExternalKey(key, systemName, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetAllocationByExternalKey(System.IAsyncResult result) {
            return base.Channel.EndGetAllocationByExternalKey(result);
        }
        
        private System.IAsyncResult OnBeginGetAllocationByExternalKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string systemName = ((string)(inValues[1]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[2]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetAllocationByExternalKey(key, systemName, token, callback, asyncState);
        }
        
        private object[] OnEndGetAllocationByExternalKey(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfAllocation retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetAllocationByExternalKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllocationByExternalKeyCompleted(object state) {
            if ((this.GetAllocationByExternalKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllocationByExternalKeyCompleted(this, new GetAllocationByExternalKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllocationByExternalKeyAsync(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetAllocationByExternalKeyAsync(key, systemName, token, null);
        }
        
        public void GetAllocationByExternalKeyAsync(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetAllocationByExternalKeyDelegate == null)) {
                this.onBeginGetAllocationByExternalKeyDelegate = new BeginOperationDelegate(this.OnBeginGetAllocationByExternalKey);
            }
            if ((this.onEndGetAllocationByExternalKeyDelegate == null)) {
                this.onEndGetAllocationByExternalKeyDelegate = new EndOperationDelegate(this.OnEndGetAllocationByExternalKey);
            }
            if ((this.onGetAllocationByExternalKeyCompletedDelegate == null)) {
                this.onGetAllocationByExternalKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllocationByExternalKeyCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllocationByExternalKeyDelegate, new object[] {
                        key,
                        systemName,
                        token}, this.onEndGetAllocationByExternalKeyDelegate, this.onGetAllocationByExternalKeyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginAddEmployeeToTask(int employeeID, int taskID, double BudgetHours, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddEmployeeToTask(employeeID, taskID, BudgetHours, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndAddEmployeeToTask(System.IAsyncResult result) {
            return base.Channel.EndAddEmployeeToTask(result);
        }
        
        private System.IAsyncResult OnBeginAddEmployeeToTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int employeeID = ((int)(inValues[0]));
            int taskID = ((int)(inValues[1]));
            double BudgetHours = ((double)(inValues[2]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[3]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginAddEmployeeToTask(employeeID, taskID, BudgetHours, token, callback, asyncState);
        }
        
        private object[] OnEndAddEmployeeToTask(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndAddEmployeeToTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddEmployeeToTaskCompleted(object state) {
            if ((this.AddEmployeeToTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddEmployeeToTaskCompleted(this, new AddEmployeeToTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddEmployeeToTaskAsync(int employeeID, int taskID, double BudgetHours, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.AddEmployeeToTaskAsync(employeeID, taskID, BudgetHours, token, null);
        }
        
        public void AddEmployeeToTaskAsync(int employeeID, int taskID, double BudgetHours, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginAddEmployeeToTaskDelegate == null)) {
                this.onBeginAddEmployeeToTaskDelegate = new BeginOperationDelegate(this.OnBeginAddEmployeeToTask);
            }
            if ((this.onEndAddEmployeeToTaskDelegate == null)) {
                this.onEndAddEmployeeToTaskDelegate = new EndOperationDelegate(this.OnEndAddEmployeeToTask);
            }
            if ((this.onAddEmployeeToTaskCompletedDelegate == null)) {
                this.onAddEmployeeToTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddEmployeeToTaskCompleted);
            }
            base.InvokeAsync(this.onBeginAddEmployeeToTaskDelegate, new object[] {
                        employeeID,
                        taskID,
                        BudgetHours,
                        token}, this.onEndAddEmployeeToTaskDelegate, this.onAddEmployeeToTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginCreateAllocation(TimecardApp.TimelogProjectManagementService.Allocation allocation, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateAllocation(allocation, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndCreateAllocation(System.IAsyncResult result) {
            return base.Channel.EndCreateAllocation(result);
        }
        
        private System.IAsyncResult OnBeginCreateAllocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TimecardApp.TimelogProjectManagementService.Allocation allocation = ((TimecardApp.TimelogProjectManagementService.Allocation)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginCreateAllocation(allocation, token, callback, asyncState);
        }
        
        private object[] OnEndCreateAllocation(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfAllocation retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndCreateAllocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateAllocationCompleted(object state) {
            if ((this.CreateAllocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateAllocationCompleted(this, new CreateAllocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateAllocationAsync(TimecardApp.TimelogProjectManagementService.Allocation allocation, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.CreateAllocationAsync(allocation, token, null);
        }
        
        public void CreateAllocationAsync(TimecardApp.TimelogProjectManagementService.Allocation allocation, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginCreateAllocationDelegate == null)) {
                this.onBeginCreateAllocationDelegate = new BeginOperationDelegate(this.OnBeginCreateAllocation);
            }
            if ((this.onEndCreateAllocationDelegate == null)) {
                this.onEndCreateAllocationDelegate = new EndOperationDelegate(this.OnEndCreateAllocation);
            }
            if ((this.onCreateAllocationCompletedDelegate == null)) {
                this.onCreateAllocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateAllocationCompleted);
            }
            base.InvokeAsync(this.onBeginCreateAllocationDelegate, new object[] {
                        allocation,
                        token}, this.onEndCreateAllocationDelegate, this.onCreateAllocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginCreateAllocations(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Allocation> allocations, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateAllocations(allocations, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndCreateAllocations(System.IAsyncResult result) {
            return base.Channel.EndCreateAllocations(result);
        }
        
        private System.IAsyncResult OnBeginCreateAllocations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Allocation> allocations = ((System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Allocation>)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginCreateAllocations(allocations, token, callback, asyncState);
        }
        
        private object[] OnEndCreateAllocations(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndCreateAllocations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateAllocationsCompleted(object state) {
            if ((this.CreateAllocationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateAllocationsCompleted(this, new CreateAllocationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateAllocationsAsync(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Allocation> allocations, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.CreateAllocationsAsync(allocations, token, null);
        }
        
        public void CreateAllocationsAsync(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Allocation> allocations, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginCreateAllocationsDelegate == null)) {
                this.onBeginCreateAllocationsDelegate = new BeginOperationDelegate(this.OnBeginCreateAllocations);
            }
            if ((this.onEndCreateAllocationsDelegate == null)) {
                this.onEndCreateAllocationsDelegate = new EndOperationDelegate(this.OnEndCreateAllocations);
            }
            if ((this.onCreateAllocationsCompletedDelegate == null)) {
                this.onCreateAllocationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateAllocationsCompleted);
            }
            base.InvokeAsync(this.onBeginCreateAllocationsDelegate, new object[] {
                        allocations,
                        token}, this.onEndCreateAllocationsDelegate, this.onCreateAllocationsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginUpdateAllocation(TimecardApp.TimelogProjectManagementService.Allocation allocation, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAllocation(allocation, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndUpdateAllocation(System.IAsyncResult result) {
            return base.Channel.EndUpdateAllocation(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAllocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TimecardApp.TimelogProjectManagementService.Allocation allocation = ((TimecardApp.TimelogProjectManagementService.Allocation)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginUpdateAllocation(allocation, token, callback, asyncState);
        }
        
        private object[] OnEndUpdateAllocation(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfAllocation retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndUpdateAllocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateAllocationCompleted(object state) {
            if ((this.UpdateAllocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAllocationCompleted(this, new UpdateAllocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAllocationAsync(TimecardApp.TimelogProjectManagementService.Allocation allocation, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.UpdateAllocationAsync(allocation, token, null);
        }
        
        public void UpdateAllocationAsync(TimecardApp.TimelogProjectManagementService.Allocation allocation, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginUpdateAllocationDelegate == null)) {
                this.onBeginUpdateAllocationDelegate = new BeginOperationDelegate(this.OnBeginUpdateAllocation);
            }
            if ((this.onEndUpdateAllocationDelegate == null)) {
                this.onEndUpdateAllocationDelegate = new EndOperationDelegate(this.OnEndUpdateAllocation);
            }
            if ((this.onUpdateAllocationCompletedDelegate == null)) {
                this.onUpdateAllocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAllocationCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAllocationDelegate, new object[] {
                        allocation,
                        token}, this.onEndUpdateAllocationDelegate, this.onUpdateAllocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginSetAllocationStatus(bool IsComplete, System.Guid AllocationGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetAllocationStatus(IsComplete, AllocationGUID, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndSetAllocationStatus(System.IAsyncResult result) {
            return base.Channel.EndSetAllocationStatus(result);
        }
        
        private System.IAsyncResult OnBeginSetAllocationStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool IsComplete = ((bool)(inValues[0]));
            System.Guid AllocationGUID = ((System.Guid)(inValues[1]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[2]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginSetAllocationStatus(IsComplete, AllocationGUID, token, callback, asyncState);
        }
        
        private object[] OnEndSetAllocationStatus(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfAllocation retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndSetAllocationStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetAllocationStatusCompleted(object state) {
            if ((this.SetAllocationStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetAllocationStatusCompleted(this, new SetAllocationStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetAllocationStatusAsync(bool IsComplete, System.Guid AllocationGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.SetAllocationStatusAsync(IsComplete, AllocationGUID, token, null);
        }
        
        public void SetAllocationStatusAsync(bool IsComplete, System.Guid AllocationGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginSetAllocationStatusDelegate == null)) {
                this.onBeginSetAllocationStatusDelegate = new BeginOperationDelegate(this.OnBeginSetAllocationStatus);
            }
            if ((this.onEndSetAllocationStatusDelegate == null)) {
                this.onEndSetAllocationStatusDelegate = new EndOperationDelegate(this.OnEndSetAllocationStatus);
            }
            if ((this.onSetAllocationStatusCompletedDelegate == null)) {
                this.onSetAllocationStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetAllocationStatusCompleted);
            }
            base.InvokeAsync(this.onBeginSetAllocationStatusDelegate, new object[] {
                        IsComplete,
                        AllocationGUID,
                        token}, this.onEndSetAllocationStatusDelegate, this.onSetAllocationStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginDeleteAllocation(System.Guid allocationGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAllocation(allocationGUID, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndDeleteAllocation(System.IAsyncResult result) {
            return base.Channel.EndDeleteAllocation(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAllocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid allocationGUID = ((System.Guid)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginDeleteAllocation(allocationGUID, token, callback, asyncState);
        }
        
        private object[] OnEndDeleteAllocation(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfAllocation retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndDeleteAllocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteAllocationCompleted(object state) {
            if ((this.DeleteAllocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAllocationCompleted(this, new DeleteAllocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAllocationAsync(System.Guid allocationGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.DeleteAllocationAsync(allocationGUID, token, null);
        }
        
        public void DeleteAllocationAsync(System.Guid allocationGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginDeleteAllocationDelegate == null)) {
                this.onBeginDeleteAllocationDelegate = new BeginOperationDelegate(this.OnBeginDeleteAllocation);
            }
            if ((this.onEndDeleteAllocationDelegate == null)) {
                this.onEndDeleteAllocationDelegate = new EndOperationDelegate(this.OnEndDeleteAllocation);
            }
            if ((this.onDeleteAllocationCompletedDelegate == null)) {
                this.onDeleteAllocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAllocationCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAllocationDelegate, new object[] {
                        allocationGUID,
                        token}, this.onEndDeleteAllocationDelegate, this.onDeleteAllocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetTasksAllocatedToEmployee(string initials, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTasksAllocatedToEmployee(initials, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfTask TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetTasksAllocatedToEmployee(System.IAsyncResult result) {
            return base.Channel.EndGetTasksAllocatedToEmployee(result);
        }
        
        private System.IAsyncResult OnBeginGetTasksAllocatedToEmployee(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string initials = ((string)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetTasksAllocatedToEmployee(initials, token, callback, asyncState);
        }
        
        private object[] OnEndGetTasksAllocatedToEmployee(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfTask retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetTasksAllocatedToEmployee(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTasksAllocatedToEmployeeCompleted(object state) {
            if ((this.GetTasksAllocatedToEmployeeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTasksAllocatedToEmployeeCompleted(this, new GetTasksAllocatedToEmployeeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTasksAllocatedToEmployeeAsync(string initials, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetTasksAllocatedToEmployeeAsync(initials, token, null);
        }
        
        public void GetTasksAllocatedToEmployeeAsync(string initials, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetTasksAllocatedToEmployeeDelegate == null)) {
                this.onBeginGetTasksAllocatedToEmployeeDelegate = new BeginOperationDelegate(this.OnBeginGetTasksAllocatedToEmployee);
            }
            if ((this.onEndGetTasksAllocatedToEmployeeDelegate == null)) {
                this.onEndGetTasksAllocatedToEmployeeDelegate = new EndOperationDelegate(this.OnEndGetTasksAllocatedToEmployee);
            }
            if ((this.onGetTasksAllocatedToEmployeeCompletedDelegate == null)) {
                this.onGetTasksAllocatedToEmployeeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTasksAllocatedToEmployeeCompleted);
            }
            base.InvokeAsync(this.onBeginGetTasksAllocatedToEmployeeDelegate, new object[] {
                        initials,
                        token}, this.onEndGetTasksAllocatedToEmployeeDelegate, this.onGetTasksAllocatedToEmployeeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetTasksBySearchText(string critiria, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTasksBySearchText(critiria, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfTask TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetTasksBySearchText(System.IAsyncResult result) {
            return base.Channel.EndGetTasksBySearchText(result);
        }
        
        private System.IAsyncResult OnBeginGetTasksBySearchText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string critiria = ((string)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetTasksBySearchText(critiria, token, callback, asyncState);
        }
        
        private object[] OnEndGetTasksBySearchText(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfTask retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetTasksBySearchText(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTasksBySearchTextCompleted(object state) {
            if ((this.GetTasksBySearchTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTasksBySearchTextCompleted(this, new GetTasksBySearchTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTasksBySearchTextAsync(string critiria, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetTasksBySearchTextAsync(critiria, token, null);
        }
        
        public void GetTasksBySearchTextAsync(string critiria, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetTasksBySearchTextDelegate == null)) {
                this.onBeginGetTasksBySearchTextDelegate = new BeginOperationDelegate(this.OnBeginGetTasksBySearchText);
            }
            if ((this.onEndGetTasksBySearchTextDelegate == null)) {
                this.onEndGetTasksBySearchTextDelegate = new EndOperationDelegate(this.OnEndGetTasksBySearchText);
            }
            if ((this.onGetTasksBySearchTextCompletedDelegate == null)) {
                this.onGetTasksBySearchTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTasksBySearchTextCompleted);
            }
            base.InvokeAsync(this.onBeginGetTasksBySearchTextDelegate, new object[] {
                        critiria,
                        token}, this.onEndGetTasksBySearchTextDelegate, this.onGetTasksBySearchTextCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetAllocationsToEmployee(string initials, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllocationsToEmployee(initials, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfAllocation TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetAllocationsToEmployee(System.IAsyncResult result) {
            return base.Channel.EndGetAllocationsToEmployee(result);
        }
        
        private System.IAsyncResult OnBeginGetAllocationsToEmployee(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string initials = ((string)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetAllocationsToEmployee(initials, token, callback, asyncState);
        }
        
        private object[] OnEndGetAllocationsToEmployee(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfAllocation retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetAllocationsToEmployee(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllocationsToEmployeeCompleted(object state) {
            if ((this.GetAllocationsToEmployeeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllocationsToEmployeeCompleted(this, new GetAllocationsToEmployeeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllocationsToEmployeeAsync(string initials, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetAllocationsToEmployeeAsync(initials, token, null);
        }
        
        public void GetAllocationsToEmployeeAsync(string initials, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetAllocationsToEmployeeDelegate == null)) {
                this.onBeginGetAllocationsToEmployeeDelegate = new BeginOperationDelegate(this.OnBeginGetAllocationsToEmployee);
            }
            if ((this.onEndGetAllocationsToEmployeeDelegate == null)) {
                this.onEndGetAllocationsToEmployeeDelegate = new EndOperationDelegate(this.OnEndGetAllocationsToEmployee);
            }
            if ((this.onGetAllocationsToEmployeeCompletedDelegate == null)) {
                this.onGetAllocationsToEmployeeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllocationsToEmployeeCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllocationsToEmployeeDelegate, new object[] {
                        initials,
                        token}, this.onEndGetAllocationsToEmployeeDelegate, this.onGetAllocationsToEmployeeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetEmployeeWork(string initials, System.DateTime startDate, System.DateTime endDate, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEmployeeWork(initials, startDate, endDate, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnit TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetEmployeeWork(System.IAsyncResult result) {
            return base.Channel.EndGetEmployeeWork(result);
        }
        
        private System.IAsyncResult OnBeginGetEmployeeWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string initials = ((string)(inValues[0]));
            System.DateTime startDate = ((System.DateTime)(inValues[1]));
            System.DateTime endDate = ((System.DateTime)(inValues[2]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[3]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetEmployeeWork(initials, startDate, endDate, token, callback, asyncState);
        }
        
        private object[] OnEndGetEmployeeWork(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnit retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetEmployeeWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEmployeeWorkCompleted(object state) {
            if ((this.GetEmployeeWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEmployeeWorkCompleted(this, new GetEmployeeWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEmployeeWorkAsync(string initials, System.DateTime startDate, System.DateTime endDate, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetEmployeeWorkAsync(initials, startDate, endDate, token, null);
        }
        
        public void GetEmployeeWorkAsync(string initials, System.DateTime startDate, System.DateTime endDate, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetEmployeeWorkDelegate == null)) {
                this.onBeginGetEmployeeWorkDelegate = new BeginOperationDelegate(this.OnBeginGetEmployeeWork);
            }
            if ((this.onEndGetEmployeeWorkDelegate == null)) {
                this.onEndGetEmployeeWorkDelegate = new EndOperationDelegate(this.OnEndGetEmployeeWork);
            }
            if ((this.onGetEmployeeWorkCompletedDelegate == null)) {
                this.onGetEmployeeWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEmployeeWorkCompleted);
            }
            base.InvokeAsync(this.onBeginGetEmployeeWorkDelegate, new object[] {
                        initials,
                        startDate,
                        endDate,
                        token}, this.onEndGetEmployeeWorkDelegate, this.onGetEmployeeWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginInsertWork(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertWork(work, source, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndInsertWork(System.IAsyncResult result) {
            return base.Channel.EndInsertWork(result);
        }
        
        private System.IAsyncResult OnBeginInsertWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work = ((System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit>)(inValues[0]));
            int source = ((int)(inValues[1]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[2]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginInsertWork(work, source, token, callback, asyncState);
        }
        
        private object[] OnEndInsertWork(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndInsertWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertWorkCompleted(object state) {
            if ((this.InsertWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertWorkCompleted(this, new InsertWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertWorkAsync(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.InsertWorkAsync(work, source, token, null);
        }
        
        public void InsertWorkAsync(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginInsertWorkDelegate == null)) {
                this.onBeginInsertWorkDelegate = new BeginOperationDelegate(this.OnBeginInsertWork);
            }
            if ((this.onEndInsertWorkDelegate == null)) {
                this.onEndInsertWorkDelegate = new EndOperationDelegate(this.OnEndInsertWork);
            }
            if ((this.onInsertWorkCompletedDelegate == null)) {
                this.onInsertWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertWorkCompleted);
            }
            base.InvokeAsync(this.onBeginInsertWorkDelegate, new object[] {
                        work,
                        source,
                        token}, this.onEndInsertWorkDelegate, this.onInsertWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginUpdateWork(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateWork(work, source, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndUpdateWork(System.IAsyncResult result) {
            return base.Channel.EndUpdateWork(result);
        }
        
        private System.IAsyncResult OnBeginUpdateWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work = ((System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit>)(inValues[0]));
            int source = ((int)(inValues[1]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[2]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginUpdateWork(work, source, token, callback, asyncState);
        }
        
        private object[] OnEndUpdateWork(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndUpdateWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateWorkCompleted(object state) {
            if ((this.UpdateWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateWorkCompleted(this, new UpdateWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateWorkAsync(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.UpdateWorkAsync(work, source, token, null);
        }
        
        public void UpdateWorkAsync(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginUpdateWorkDelegate == null)) {
                this.onBeginUpdateWorkDelegate = new BeginOperationDelegate(this.OnBeginUpdateWork);
            }
            if ((this.onEndUpdateWorkDelegate == null)) {
                this.onEndUpdateWorkDelegate = new EndOperationDelegate(this.OnEndUpdateWork);
            }
            if ((this.onUpdateWorkCompletedDelegate == null)) {
                this.onUpdateWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateWorkCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateWorkDelegate, new object[] {
                        work,
                        source,
                        token}, this.onEndUpdateWorkDelegate, this.onUpdateWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginDeleteWork(System.Collections.ObjectModel.ObservableCollection<System.Guid> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteWork(work, source, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndDeleteWork(System.IAsyncResult result) {
            return base.Channel.EndDeleteWork(result);
        }
        
        private System.IAsyncResult OnBeginDeleteWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<System.Guid> work = ((System.Collections.ObjectModel.ObservableCollection<System.Guid>)(inValues[0]));
            int source = ((int)(inValues[1]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[2]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginDeleteWork(work, source, token, callback, asyncState);
        }
        
        private object[] OnEndDeleteWork(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndDeleteWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteWorkCompleted(object state) {
            if ((this.DeleteWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteWorkCompleted(this, new DeleteWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteWorkAsync(System.Collections.ObjectModel.ObservableCollection<System.Guid> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.DeleteWorkAsync(work, source, token, null);
        }
        
        public void DeleteWorkAsync(System.Collections.ObjectModel.ObservableCollection<System.Guid> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginDeleteWorkDelegate == null)) {
                this.onBeginDeleteWorkDelegate = new BeginOperationDelegate(this.OnBeginDeleteWork);
            }
            if ((this.onEndDeleteWorkDelegate == null)) {
                this.onEndDeleteWorkDelegate = new EndOperationDelegate(this.OnEndDeleteWork);
            }
            if ((this.onDeleteWorkCompletedDelegate == null)) {
                this.onDeleteWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteWorkDelegate, new object[] {
                        work,
                        source,
                        token}, this.onEndDeleteWorkDelegate, this.onDeleteWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetTaskByTaskNo(string taskNo, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTaskByTaskNo(taskNo, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfTask TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetTaskByTaskNo(System.IAsyncResult result) {
            return base.Channel.EndGetTaskByTaskNo(result);
        }
        
        private System.IAsyncResult OnBeginGetTaskByTaskNo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string taskNo = ((string)(inValues[0]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[1]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetTaskByTaskNo(taskNo, token, callback, asyncState);
        }
        
        private object[] OnEndGetTaskByTaskNo(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfTask retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetTaskByTaskNo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTaskByTaskNoCompleted(object state) {
            if ((this.GetTaskByTaskNoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTaskByTaskNoCompleted(this, new GetTaskByTaskNoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTaskByTaskNoAsync(string taskNo, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetTaskByTaskNoAsync(taskNo, token, null);
        }
        
        public void GetTaskByTaskNoAsync(string taskNo, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetTaskByTaskNoDelegate == null)) {
                this.onBeginGetTaskByTaskNoDelegate = new BeginOperationDelegate(this.OnBeginGetTaskByTaskNo);
            }
            if ((this.onEndGetTaskByTaskNoDelegate == null)) {
                this.onEndGetTaskByTaskNoDelegate = new EndOperationDelegate(this.OnEndGetTaskByTaskNo);
            }
            if ((this.onGetTaskByTaskNoCompletedDelegate == null)) {
                this.onGetTaskByTaskNoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTaskByTaskNoCompleted);
            }
            base.InvokeAsync(this.onBeginGetTaskByTaskNoDelegate, new object[] {
                        taskNo,
                        token}, this.onEndGetTaskByTaskNoDelegate, this.onGetTaskByTaskNoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetWorkPaged(string initials, System.DateTime startDate, System.DateTime endDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkPaged(initials, startDate, endDate, page, pageSize, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetWorkPaged(System.IAsyncResult result) {
            return base.Channel.EndGetWorkPaged(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkPaged(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string initials = ((string)(inValues[0]));
            System.DateTime startDate = ((System.DateTime)(inValues[1]));
            System.DateTime endDate = ((System.DateTime)(inValues[2]));
            int page = ((int)(inValues[3]));
            int pageSize = ((int)(inValues[4]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[5]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetWorkPaged(initials, startDate, endDate, page, pageSize, token, callback, asyncState);
        }
        
        private object[] OnEndGetWorkPaged(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetWorkPaged(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkPagedCompleted(object state) {
            if ((this.GetWorkPagedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkPagedCompleted(this, new GetWorkPagedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkPagedAsync(string initials, System.DateTime startDate, System.DateTime endDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetWorkPagedAsync(initials, startDate, endDate, page, pageSize, token, null);
        }
        
        public void GetWorkPagedAsync(string initials, System.DateTime startDate, System.DateTime endDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetWorkPagedDelegate == null)) {
                this.onBeginGetWorkPagedDelegate = new BeginOperationDelegate(this.OnBeginGetWorkPaged);
            }
            if ((this.onEndGetWorkPagedDelegate == null)) {
                this.onEndGetWorkPagedDelegate = new EndOperationDelegate(this.OnEndGetWorkPaged);
            }
            if ((this.onGetWorkPagedCompletedDelegate == null)) {
                this.onGetWorkPagedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkPagedCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkPagedDelegate, new object[] {
                        initials,
                        startDate,
                        endDate,
                        page,
                        pageSize,
                        token}, this.onEndGetWorkPagedDelegate, this.onGetWorkPagedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetWorkPagedWithExternalIds(string systemName, int approvalLevel, string initials, System.DateTime startDate, System.DateTime endDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkPagedWithExternalIds(systemName, approvalLevel, initials, startDate, endDate, page, pageSize, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlatExternal TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetWorkPagedWithExternalIds(System.IAsyncResult result) {
            return base.Channel.EndGetWorkPagedWithExternalIds(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkPagedWithExternalIds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string systemName = ((string)(inValues[0]));
            int approvalLevel = ((int)(inValues[1]));
            string initials = ((string)(inValues[2]));
            System.DateTime startDate = ((System.DateTime)(inValues[3]));
            System.DateTime endDate = ((System.DateTime)(inValues[4]));
            int page = ((int)(inValues[5]));
            int pageSize = ((int)(inValues[6]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[7]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetWorkPagedWithExternalIds(systemName, approvalLevel, initials, startDate, endDate, page, pageSize, token, callback, asyncState);
        }
        
        private object[] OnEndGetWorkPagedWithExternalIds(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlatExternal retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetWorkPagedWithExternalIds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkPagedWithExternalIdsCompleted(object state) {
            if ((this.GetWorkPagedWithExternalIdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkPagedWithExternalIdsCompleted(this, new GetWorkPagedWithExternalIdsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkPagedWithExternalIdsAsync(string systemName, int approvalLevel, string initials, System.DateTime startDate, System.DateTime endDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetWorkPagedWithExternalIdsAsync(systemName, approvalLevel, initials, startDate, endDate, page, pageSize, token, null);
        }
        
        public void GetWorkPagedWithExternalIdsAsync(string systemName, int approvalLevel, string initials, System.DateTime startDate, System.DateTime endDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetWorkPagedWithExternalIdsDelegate == null)) {
                this.onBeginGetWorkPagedWithExternalIdsDelegate = new BeginOperationDelegate(this.OnBeginGetWorkPagedWithExternalIds);
            }
            if ((this.onEndGetWorkPagedWithExternalIdsDelegate == null)) {
                this.onEndGetWorkPagedWithExternalIdsDelegate = new EndOperationDelegate(this.OnEndGetWorkPagedWithExternalIds);
            }
            if ((this.onGetWorkPagedWithExternalIdsCompletedDelegate == null)) {
                this.onGetWorkPagedWithExternalIdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkPagedWithExternalIdsCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkPagedWithExternalIdsDelegate, new object[] {
                        systemName,
                        approvalLevel,
                        initials,
                        startDate,
                        endDate,
                        page,
                        pageSize,
                        token}, this.onEndGetWorkPagedWithExternalIdsDelegate, this.onGetWorkPagedWithExternalIdsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetWorkChangesPaged(string initials, System.DateTime registrationStartDate, System.DateTime registrationEndDate, System.DateTime changeStartDate, System.DateTime changeEndDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkChangesPaged(initials, registrationStartDate, registrationEndDate, changeStartDate, changeEndDate, page, pageSize, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetWorkChangesPaged(System.IAsyncResult result) {
            return base.Channel.EndGetWorkChangesPaged(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkChangesPaged(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string initials = ((string)(inValues[0]));
            System.DateTime registrationStartDate = ((System.DateTime)(inValues[1]));
            System.DateTime registrationEndDate = ((System.DateTime)(inValues[2]));
            System.DateTime changeStartDate = ((System.DateTime)(inValues[3]));
            System.DateTime changeEndDate = ((System.DateTime)(inValues[4]));
            int page = ((int)(inValues[5]));
            int pageSize = ((int)(inValues[6]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[7]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetWorkChangesPaged(initials, registrationStartDate, registrationEndDate, changeStartDate, changeEndDate, page, pageSize, token, callback, asyncState);
        }
        
        private object[] OnEndGetWorkChangesPaged(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetWorkChangesPaged(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkChangesPagedCompleted(object state) {
            if ((this.GetWorkChangesPagedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkChangesPagedCompleted(this, new GetWorkChangesPagedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkChangesPagedAsync(string initials, System.DateTime registrationStartDate, System.DateTime registrationEndDate, System.DateTime changeStartDate, System.DateTime changeEndDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetWorkChangesPagedAsync(initials, registrationStartDate, registrationEndDate, changeStartDate, changeEndDate, page, pageSize, token, null);
        }
        
        public void GetWorkChangesPagedAsync(string initials, System.DateTime registrationStartDate, System.DateTime registrationEndDate, System.DateTime changeStartDate, System.DateTime changeEndDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetWorkChangesPagedDelegate == null)) {
                this.onBeginGetWorkChangesPagedDelegate = new BeginOperationDelegate(this.OnBeginGetWorkChangesPaged);
            }
            if ((this.onEndGetWorkChangesPagedDelegate == null)) {
                this.onEndGetWorkChangesPagedDelegate = new EndOperationDelegate(this.OnEndGetWorkChangesPaged);
            }
            if ((this.onGetWorkChangesPagedCompletedDelegate == null)) {
                this.onGetWorkChangesPagedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkChangesPagedCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkChangesPagedDelegate, new object[] {
                        initials,
                        registrationStartDate,
                        registrationEndDate,
                        changeStartDate,
                        changeEndDate,
                        page,
                        pageSize,
                        token}, this.onEndGetWorkChangesPagedDelegate, this.onGetWorkChangesPagedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetProjectTasksPaged(System.Guid projectGuid, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProjectTasksPaged(projectGuid, page, pageSize, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfProjectTaskFlat TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetProjectTasksPaged(System.IAsyncResult result) {
            return base.Channel.EndGetProjectTasksPaged(result);
        }
        
        private System.IAsyncResult OnBeginGetProjectTasksPaged(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid projectGuid = ((System.Guid)(inValues[0]));
            int page = ((int)(inValues[1]));
            int pageSize = ((int)(inValues[2]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[3]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetProjectTasksPaged(projectGuid, page, pageSize, token, callback, asyncState);
        }
        
        private object[] OnEndGetProjectTasksPaged(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfProjectTaskFlat retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetProjectTasksPaged(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProjectTasksPagedCompleted(object state) {
            if ((this.GetProjectTasksPagedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProjectTasksPagedCompleted(this, new GetProjectTasksPagedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProjectTasksPagedAsync(System.Guid projectGuid, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetProjectTasksPagedAsync(projectGuid, page, pageSize, token, null);
        }
        
        public void GetProjectTasksPagedAsync(System.Guid projectGuid, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetProjectTasksPagedDelegate == null)) {
                this.onBeginGetProjectTasksPagedDelegate = new BeginOperationDelegate(this.OnBeginGetProjectTasksPaged);
            }
            if ((this.onEndGetProjectTasksPagedDelegate == null)) {
                this.onEndGetProjectTasksPagedDelegate = new EndOperationDelegate(this.OnEndGetProjectTasksPaged);
            }
            if ((this.onGetProjectTasksPagedCompletedDelegate == null)) {
                this.onGetProjectTasksPagedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProjectTasksPagedCompleted);
            }
            base.InvokeAsync(this.onBeginGetProjectTasksPagedDelegate, new object[] {
                        projectGuid,
                        page,
                        pageSize,
                        token}, this.onEndGetProjectTasksPagedDelegate, this.onGetProjectTasksPagedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TimecardApp.TimelogProjectManagementService.ProjectManagementService.BeginGetWorkChangeLogPaged(System.DateTime startDate, System.DateTime endDate, bool includeCreates, bool includeUpdates, bool includeDeletes, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkChangeLogPaged(startDate, endDate, includeCreates, includeUpdates, includeDeletes, page, pageSize, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat TimecardApp.TimelogProjectManagementService.ProjectManagementService.EndGetWorkChangeLogPaged(System.IAsyncResult result) {
            return base.Channel.EndGetWorkChangeLogPaged(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkChangeLogPaged(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime startDate = ((System.DateTime)(inValues[0]));
            System.DateTime endDate = ((System.DateTime)(inValues[1]));
            bool includeCreates = ((bool)(inValues[2]));
            bool includeUpdates = ((bool)(inValues[3]));
            bool includeDeletes = ((bool)(inValues[4]));
            int page = ((int)(inValues[5]));
            int pageSize = ((int)(inValues[6]));
            TimecardApp.TimelogProjectManagementService.SecurityToken token = ((TimecardApp.TimelogProjectManagementService.SecurityToken)(inValues[7]));
            return ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).BeginGetWorkChangeLogPaged(startDate, endDate, includeCreates, includeUpdates, includeDeletes, page, pageSize, token, callback, asyncState);
        }
        
        private object[] OnEndGetWorkChangeLogPaged(System.IAsyncResult result) {
            TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat retVal = ((TimecardApp.TimelogProjectManagementService.ProjectManagementService)(this)).EndGetWorkChangeLogPaged(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkChangeLogPagedCompleted(object state) {
            if ((this.GetWorkChangeLogPagedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkChangeLogPagedCompleted(this, new GetWorkChangeLogPagedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkChangeLogPagedAsync(System.DateTime startDate, System.DateTime endDate, bool includeCreates, bool includeUpdates, bool includeDeletes, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token) {
            this.GetWorkChangeLogPagedAsync(startDate, endDate, includeCreates, includeUpdates, includeDeletes, page, pageSize, token, null);
        }
        
        public void GetWorkChangeLogPagedAsync(System.DateTime startDate, System.DateTime endDate, bool includeCreates, bool includeUpdates, bool includeDeletes, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, object userState) {
            if ((this.onBeginGetWorkChangeLogPagedDelegate == null)) {
                this.onBeginGetWorkChangeLogPagedDelegate = new BeginOperationDelegate(this.OnBeginGetWorkChangeLogPaged);
            }
            if ((this.onEndGetWorkChangeLogPagedDelegate == null)) {
                this.onEndGetWorkChangeLogPagedDelegate = new EndOperationDelegate(this.OnEndGetWorkChangeLogPaged);
            }
            if ((this.onGetWorkChangeLogPagedCompletedDelegate == null)) {
                this.onGetWorkChangeLogPagedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkChangeLogPagedCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkChangeLogPagedDelegate, new object[] {
                        startDate,
                        endDate,
                        includeCreates,
                        includeUpdates,
                        includeDeletes,
                        page,
                        pageSize,
                        token}, this.onEndGetWorkChangeLogPagedDelegate, this.onGetWorkChangeLogPagedCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TimecardApp.TimelogProjectManagementService.ProjectManagementService CreateChannel() {
            return new ProjectManagementServiceClientChannel(this);
        }
        
        private class ProjectManagementServiceClientChannel : ChannelBase<TimecardApp.TimelogProjectManagementService.ProjectManagementService>, TimecardApp.TimelogProjectManagementService.ProjectManagementService {
            
            public ProjectManagementServiceClientChannel(System.ServiceModel.ClientBase<TimecardApp.TimelogProjectManagementService.ProjectManagementService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginIsAlive(TimecardApp.TimelogProjectManagementService.IsAliveRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("IsAlive", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.IsAliveResponse EndIsAlive(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.IsAliveResponse _result = ((TimecardApp.TimelogProjectManagementService.IsAliveResponse)(base.EndInvoke("IsAlive", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetProjectByExternalKey(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = systemName;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetProjectByExternalKey", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfProject EndGetProjectByExternalKey(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfProject _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfProject)(base.EndInvoke("GetProjectByExternalKey", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateProject(TimecardApp.TimelogProjectManagementService.Project project, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = project;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("CreateProject", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.BatchResponseOfProject EndCreateProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.BatchResponseOfProject _result = ((TimecardApp.TimelogProjectManagementService.BatchResponseOfProject)(base.EndInvoke("CreateProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateProjectFromTemplate(
                        string projectTemplateName, 
                        string projectName, 
                        string projectNo, 
                        string customerName, 
                        System.Guid priceListID, 
                        System.Guid priceGroupID, 
                        string projectManagerInitials, 
                        string accountManagerInitials, 
                        string handledByDepartmentNo, 
                        string orderedByDepartmentNo, 
                        bool useProjectNumberSeries, 
                        bool useTasksAndMileStonesFromTemplate, 
                        bool useResourceGroupFromTemplate, 
                        bool useAllocationsFromTemplate, 
                        bool usePaymentPlanFromTemplate, 
                        int source, 
                        TimecardApp.TimelogProjectManagementService.SecurityToken token, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[17];
                _args[0] = projectTemplateName;
                _args[1] = projectName;
                _args[2] = projectNo;
                _args[3] = customerName;
                _args[4] = priceListID;
                _args[5] = priceGroupID;
                _args[6] = projectManagerInitials;
                _args[7] = accountManagerInitials;
                _args[8] = handledByDepartmentNo;
                _args[9] = orderedByDepartmentNo;
                _args[10] = useProjectNumberSeries;
                _args[11] = useTasksAndMileStonesFromTemplate;
                _args[12] = useResourceGroupFromTemplate;
                _args[13] = useAllocationsFromTemplate;
                _args[14] = usePaymentPlanFromTemplate;
                _args[15] = source;
                _args[16] = token;
                System.IAsyncResult _result = base.BeginInvoke("CreateProjectFromTemplate", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.BatchResponseOfProject EndCreateProjectFromTemplate(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.BatchResponseOfProject _result = ((TimecardApp.TimelogProjectManagementService.BatchResponseOfProject)(base.EndInvoke("CreateProjectFromTemplate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateProject(TimecardApp.TimelogProjectManagementService.Project project, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = project;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("UpdateProject", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.BatchResponseOfProject EndUpdateProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.BatchResponseOfProject _result = ((TimecardApp.TimelogProjectManagementService.BatchResponseOfProject)(base.EndInvoke("UpdateProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteProject(System.Guid projectGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = projectGUID;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("DeleteProject", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfProject EndDeleteProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfProject _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfProject)(base.EndInvoke("DeleteProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginProjectChangeStatus(System.Guid projectGUID, int targetStatus, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = projectGUID;
                _args[1] = targetStatus;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("ProjectChangeStatus", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfProject EndProjectChangeStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfProject _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfProject)(base.EndInvoke("ProjectChangeStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTaskByExternalKey(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = systemName;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetTaskByExternalKey", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfTask EndGetTaskByExternalKey(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfTask _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(base.EndInvoke("GetTaskByExternalKey", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateTask(TimecardApp.TimelogProjectManagementService.Task task, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = task;
                _args[1] = projectID;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("CreateTask", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.BatchResponseOfTask EndCreateTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.BatchResponseOfTask _result = ((TimecardApp.TimelogProjectManagementService.BatchResponseOfTask)(base.EndInvoke("CreateTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateTask(TimecardApp.TimelogProjectManagementService.Task task, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = task;
                _args[1] = projectID;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTask", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.BatchResponseOfTask EndUpdateTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.BatchResponseOfTask _result = ((TimecardApp.TimelogProjectManagementService.BatchResponseOfTask)(base.EndInvoke("UpdateTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateSubTask(TimecardApp.TimelogProjectManagementService.Task task, int parentTaskId, int projectID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = task;
                _args[1] = parentTaskId;
                _args[2] = projectID;
                _args[3] = token;
                System.IAsyncResult _result = base.BeginInvoke("CreateSubTask", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.BatchResponseOfTask EndCreateSubTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.BatchResponseOfTask _result = ((TimecardApp.TimelogProjectManagementService.BatchResponseOfTask)(base.EndInvoke("CreateSubTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteTask(System.Guid TaskGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = TaskGUID;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("DeleteTask", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfTask EndDeleteTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfTask _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(base.EndInvoke("DeleteTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeTaskStatus(System.Guid taskGUID, int targetStatus, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = taskGUID;
                _args[1] = targetStatus;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("ChangeTaskStatus", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfTask EndChangeTaskStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfTask _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(base.EndInvoke("ChangeTaskStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllocationByExternalKey(string key, string systemName, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = systemName;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetAllocationByExternalKey", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndGetAllocationByExternalKey(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfAllocation _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(base.EndInvoke("GetAllocationByExternalKey", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddEmployeeToTask(int employeeID, int taskID, double BudgetHours, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = employeeID;
                _args[1] = taskID;
                _args[2] = BudgetHours;
                _args[3] = token;
                System.IAsyncResult _result = base.BeginInvoke("AddEmployeeToTask", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation EndAddEmployeeToTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation _result = ((TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation)(base.EndInvoke("AddEmployeeToTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateAllocation(TimecardApp.TimelogProjectManagementService.Allocation allocation, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = allocation;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("CreateAllocation", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndCreateAllocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfAllocation _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(base.EndInvoke("CreateAllocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateAllocations(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.Allocation> allocations, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = allocations;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("CreateAllocations", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation EndCreateAllocations(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation _result = ((TimecardApp.TimelogProjectManagementService.BatchResponseOfAllocation)(base.EndInvoke("CreateAllocations", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateAllocation(TimecardApp.TimelogProjectManagementService.Allocation allocation, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = allocation;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("UpdateAllocation", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndUpdateAllocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfAllocation _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(base.EndInvoke("UpdateAllocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetAllocationStatus(bool IsComplete, System.Guid AllocationGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = IsComplete;
                _args[1] = AllocationGUID;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("SetAllocationStatus", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndSetAllocationStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfAllocation _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(base.EndInvoke("SetAllocationStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAllocation(System.Guid allocationGUID, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = allocationGUID;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAllocation", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndDeleteAllocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfAllocation _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(base.EndInvoke("DeleteAllocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTasksAllocatedToEmployee(string initials, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = initials;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetTasksAllocatedToEmployee", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfTask EndGetTasksAllocatedToEmployee(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfTask _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(base.EndInvoke("GetTasksAllocatedToEmployee", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTasksBySearchText(string critiria, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = critiria;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetTasksBySearchText", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfTask EndGetTasksBySearchText(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfTask _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(base.EndInvoke("GetTasksBySearchText", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllocationsToEmployee(string initials, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = initials;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetAllocationsToEmployee", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfAllocation EndGetAllocationsToEmployee(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfAllocation _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfAllocation)(base.EndInvoke("GetAllocationsToEmployee", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetEmployeeWork(string initials, System.DateTime startDate, System.DateTime endDate, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = initials;
                _args[1] = startDate;
                _args[2] = endDate;
                _args[3] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetEmployeeWork", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnit EndGetEmployeeWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnit _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnit)(base.EndInvoke("GetEmployeeWork", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertWork(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = work;
                _args[1] = source;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("InsertWork", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit EndInsertWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit _result = ((TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit)(base.EndInvoke("InsertWork", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateWork(System.Collections.ObjectModel.ObservableCollection<TimecardApp.TimelogProjectManagementService.WorkUnit> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = work;
                _args[1] = source;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("UpdateWork", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit EndUpdateWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit _result = ((TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit)(base.EndInvoke("UpdateWork", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteWork(System.Collections.ObjectModel.ObservableCollection<System.Guid> work, int source, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = work;
                _args[1] = source;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("DeleteWork", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit EndDeleteWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit _result = ((TimecardApp.TimelogProjectManagementService.BatchResponseOfWorkUnit)(base.EndInvoke("DeleteWork", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTaskByTaskNo(string taskNo, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = taskNo;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetTaskByTaskNo", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfTask EndGetTaskByTaskNo(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfTask _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfTask)(base.EndInvoke("GetTaskByTaskNo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkPaged(string initials, System.DateTime startDate, System.DateTime endDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = initials;
                _args[1] = startDate;
                _args[2] = endDate;
                _args[3] = page;
                _args[4] = pageSize;
                _args[5] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkPaged", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat EndGetWorkPaged(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat)(base.EndInvoke("GetWorkPaged", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkPagedWithExternalIds(string systemName, int approvalLevel, string initials, System.DateTime startDate, System.DateTime endDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = systemName;
                _args[1] = approvalLevel;
                _args[2] = initials;
                _args[3] = startDate;
                _args[4] = endDate;
                _args[5] = page;
                _args[6] = pageSize;
                _args[7] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkPagedWithExternalIds", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlatExternal EndGetWorkPagedWithExternalIds(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlatExternal _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlatExternal)(base.EndInvoke("GetWorkPagedWithExternalIds", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkChangesPaged(string initials, System.DateTime registrationStartDate, System.DateTime registrationEndDate, System.DateTime changeStartDate, System.DateTime changeEndDate, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = initials;
                _args[1] = registrationStartDate;
                _args[2] = registrationEndDate;
                _args[3] = changeStartDate;
                _args[4] = changeEndDate;
                _args[5] = page;
                _args[6] = pageSize;
                _args[7] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkChangesPaged", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat EndGetWorkChangesPaged(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat)(base.EndInvoke("GetWorkChangesPaged", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetProjectTasksPaged(System.Guid projectGuid, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = projectGuid;
                _args[1] = page;
                _args[2] = pageSize;
                _args[3] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetProjectTasksPaged", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfProjectTaskFlat EndGetProjectTasksPaged(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfProjectTaskFlat _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfProjectTaskFlat)(base.EndInvoke("GetProjectTasksPaged", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkChangeLogPaged(System.DateTime startDate, System.DateTime endDate, bool includeCreates, bool includeUpdates, bool includeDeletes, int page, int pageSize, TimecardApp.TimelogProjectManagementService.SecurityToken token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = startDate;
                _args[1] = endDate;
                _args[2] = includeCreates;
                _args[3] = includeUpdates;
                _args[4] = includeDeletes;
                _args[5] = page;
                _args[6] = pageSize;
                _args[7] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkChangeLogPaged", _args, callback, asyncState);
                return _result;
            }
            
            public TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat EndGetWorkChangeLogPaged(System.IAsyncResult result) {
                object[] _args = new object[0];
                TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat _result = ((TimecardApp.TimelogProjectManagementService.ResponseOfWorkUnitFlat)(base.EndInvoke("GetWorkChangeLogPaged", _args, result)));
                return _result;
            }
        }
    }
}
